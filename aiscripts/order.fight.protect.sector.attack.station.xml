<?xml version="1.0" encoding="iso-8859-1"?>
<aiscript name="order.fight.protect.sector.attack.station" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd"
  version="107">
  <order id="AttackStationInSector" name="{1972092401, 10001}" description="{1972092401, 10011}" category="combat" allowinloop="false">
    <params>
      <param name="primaryTarget" required="true" type="object" text="{1041, 10126}" comment="Target. The object to fight with">
        <input_param name="class" value="[class.station]" />
      </param>
      <param name="temporaryFormationLeader" default="null" type="object" text="{1041, 10024}"
        comment="Leader of the  temporary formation">
        <input_param name="class" value="[class.ship_l]" />
      </param>
      <param name="debugChance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100" />
      </param>
    </params>
    <requires>
      <match class="[class.ship_l, class.ship_xl]" />
    </requires>
    <location condition="not @$primaryTarget.iswreck" object="$primaryTarget" />
  </order>
  <interrupts>
    <library>
      <actions name="RefreshTargetsRelatedData">
        <set_value name="$positionInSector" exact="this.assignedcontrolled.relativeposition.{$targetSector}" />
        <do_if value="$thisRadius? and @$thisRadius" negate="true">
          <set_value name="$thisRadius" exact="this.assignedcontrolled.size / 2m" />
        </do_if>
        <do_if value="$primaryTarget? and @$primaryTarget">
          <set_value name="$targetSector" exact="$primaryTarget.sector" />
          <do_if value="$primaryTargetRadius? and @$primaryTargetRadius" negate="true">
            <set_value name="$primaryTargetRadius" exact="$primaryTarget.size / 2m" />
            <set_value name="$maxEffectiveTargetCombatRange"
              exact="if @$primaryTarget.maxcombatrange.all != null then $primaryTarget.maxcombatrange.all else 0" />
          </do_if>
          <set_value name="$positionPrimaryTargetInSector" exact="$primaryTarget.relativeposition.{$targetSector}" />
          <set_value name="$currentDistanceToPrimary" exact="this.assignedcontrolled.bboxdistanceto.{$primaryTarget}" />
          <set_value name="$safeDistanceToPrimary"
            exact="($maxEffectiveTargetCombatRange + $primaryTargetRadius + $thisRadius) * 1.1" />
          <do_if value="this.assignedcontrolled.attention ge attention.visible and this.assignedcontrolled.isclass.ship_l">
            <set_value name="$safeDistanceToPrimary" exact="$safeDistanceToPrimary * 2" />
          </do_if>
          <set_value name="$positionRelativeToPrimaryTarget" exact="this.assignedcontrolled.relativeposition.{$primaryTarget}" />
        </do_if>
        <do_if value="$target? and @$target">
          <set_value name="$targetRadius" exact="$target.size / 2m" />
          <set_value name="$currentDistanceToTarget" exact="this.assignedcontrolled.bboxdistanceto.{$target}" />
          <set_value name="$targetEffectiveRange" exact="$targetRadius + $maxEffectiveTargetCombatRange" />
          <set_value name="$positionTargetRelativeToPrimaryTarget" exact="$target.relativeposition.{$primaryTarget}" />
          <set_value name="$positionRelativeToTarget" exact="this.assignedcontrolled.relativeposition.{$target}" />
        </do_if>
      </actions>
      <actions name="AssignSubordinatesToAttackStation">
        <debug_text
          text="'AttackStationInSector [%s]: Assigning subordinates to attack %s.  Count: Subordinates: %s. Escort: %s.'.
                    [this.assignedcontrolled.debugname, $primaryTarget.debugname,
                    @this.assignedcontrolled.subordinates.count, @this.$escortgroup.count]"
          chance="$debugChance" />
        <do_if
          value="not (@$isFleeing == true) and not @$primaryTarget.iswreck and @this.assignedcontrolled.subordinates.count gt 0 and @this.$escortgroup.count">
          <do_for_each name="$subordinate" in="this.$escortgroup" reverse="true">
            <debug_text
              text="'AttackStationInSector [%s]: Subordinate %s. Class: %s. Type: %s. Assignment: %s. Group Dock Override: %s. Hull: %s.'.
                            [this.assignedcontrolled.debugname, @$subordinate.debugname, @$subordinate.class, @$subordinate.type,
                            @$subordinate.assignment, @$subordinate.subordinategroupdockoverride, @$subordinate.hullpercentage]"
              chance="$debugChance" />
            <do_if value="$subordinate.hullpercentage le 95">
              <debug_text
                text="'AttackStationInSector [%s]: Subordinate %s is below 60 percentage of hull.'.
                                [this.assignedcontrolled.debugname, @$subordinate.debugname]"
                chance="$debugChance" />
              <set_value name="$subordinate.pilot.$playerOwnedWorkaroundForRestock" exact="true" />
              <create_order id="'Resupply'" object="$subordinate" immediate="true">
                <param name="internalorder" value="true" />
                <param name="debugchance" value="$debugChance" />
                <param name="onlyuseresupplierships" value="false" />
                <param name="urgent" value="true" />
                <!-- <param name="playerOwnedWorkaround" value="true" /> -->
              </create_order>
              <remove_from_group group="this.$escortgroup" object="$subordinate" />
            </do_if>
            <do_else>
              <do_if value="($subordinate.assignment == assignment.attack) and not $subordinate.subordinategroupdockoverride">
                <do_if value="this.assignedcontrolled.commander and (this.attention ge attention.visible)">
                  <signal_objects object="player.entity" param="'npc_usecase'"
                    chance="if @global.$SuppressCommChatter then 0 else 100"
                    param2="table[ $name = '$Combat_Escort_Engaging', $actors = table[ $Spotter = this, $Leader = this.assignedcontrolled.commanderentity] ]" />
                </do_if>
                <debug_text
                  text="'AttackStationInSector [%s]: Ordering attack subordinate %s to attack %s.'.
                                [@this.assignedcontrolled.debugname, @$subordinate.debugname, @$primaryTarget.debugname]"
                  chance="$debugChance" />
                <do_if value="@$subordinate.order != 'AttackStationInSector'">
                  <create_order object="$subordinate" id="'AttackStationInSector'" immediate="true">
                    <param name="primaryTarget" value="$primaryTarget" />
                    <param name="temporaryFormationLeader" value="$temporaryFormationLeader" />
                    <param name="debugChance" value="$debugChance" />
                  </create_order>
                </do_if>
                <remove_from_group group="this.$escortgroup" object="$subordinate" />
              </do_if>
            </do_else>
            <!-- <wait exact="10ms" /> -->
          </do_for_each>
        </do_if>
      </actions>
      <actions name="IsNotAcceptableRotation">
        <create_orientation name="$rotationOnTarget" orientation="look_at" refobject="$rotationGetOn" useaimtarget="true">
          <position object="this.assignedcontrolled" />
        </create_orientation>
        <set_value name="$rotationCurrent" exact="this.assignedcontrolled.rotation" />
        <set_value name="$rotationsIsNotAcceptable"
          exact="abs($rotationCurrent.yaw - $rotationOnTarget.yaw) gt 0.2 or abs($rotationCurrent.pitch - $rotationOnTarget.pitch) gt 0.2 or abs($rotationCurrent.roll - $rotationOnTarget.roll) gt 0.2" />
        <debug_text
          text="'AttackStationInSector [%s]: RotationCheck: Current %s. On Target: %s. Is Not Acceptable: %s. Delta: Yaw: %s. Pitch: %s. Roll: %s.'.
                        [this.assignedcontrolled.debugname, $rotationCurrent, $rotationOnTarget, $rotationsIsNotAcceptable,
                        abs($rotationCurrent.yaw - $rotationOnTarget.yaw), abs($rotationCurrent.pitch - $rotationOnTarget.pitch),
                        abs($rotationCurrent.roll - $rotationOnTarget.roll)]"
          chance="
                $debugChance" />
        <remove_value name="$rotationCurrent" />
      </actions>
      <actions name="CheckIfPathCrossedUnsafeRadius">
        <!-- First determine vector from position to interim position -->
        <set_value name="$nextPositionDirectVector"
          exact="[
                    ($nextPositionRelativeToObject.x - $currentPositionRelativeToObject.x)f,
                    ($nextPositionRelativeToObject.y - $currentPositionRelativeToObject.y)f,
                    ($nextPositionRelativeToObject.z - $currentPositionRelativeToObject.z)f
                    ]" />
        <!-- Calculate a, b, c coefficients for quadratic equation -->
        <set_value name="$nextPositionA" exact="($nextPositionDirectVector.{1}^2 + $nextPositionDirectVector.{2}^2 + $nextPositionDirectVector.{3}^2)f" />
        <set_value name="$nextPositionB"
          exact="(2 * (($currentPositionRelativeToObject.x)f * $nextPositionDirectVector.{1} +
                       ($currentPositionRelativeToObject.y)f * $nextPositionDirectVector.{2} +
                       ($currentPositionRelativeToObject.z)f * $nextPositionDirectVector.{3}))f" />
        <set_value name="$nextPositionC"
          exact="($currentPositionRelativeToObject.x)f^2 +
                       ($currentPositionRelativeToObject.y)f^2 +
                       ($currentPositionRelativeToObject.z)f^2 -
                       (($safeRadiusAroundObject)f^2)f" />

        <!-- Calculate discriminant -->
        <set_value name="$nextPositionDiscriminant" exact="$nextPositionB^2 - 4 * $nextPositionA * $nextPositionC" />
        <set_value name="$pathCrossesUnSafeRadius" exact="$nextPositionDiscriminant ge 0" />
        <do_if value="$pathCrossesUnSafeRadius">
          <!-- checking if the path crosses exactly between the two points -->
          <set_value name="$intersectionPointOne" exact="(-$nextPositionB + sqrt($nextPositionDiscriminant)) / (2 * $nextPositionA)" />
          <set_value name="$intersectionPointTwo" exact="(-$nextPositionB - sqrt($nextPositionDiscriminant)) / (2 * $nextPositionA)" />
          <set_value name="$pathCrossesUnSafeRadius"
            exact="($intersectionPointOne ge 0 and $intersectionPointOne le 1) or ($intersectionPointTwo ge 0 and $intersectionPointTwo le 1)" />
          <remove_value name="$intersectionPointOne" />
          <remove_value name="$intersectionPointTwo" />
        </do_if>
        <debug_text
          text="'AttackStationInSector [%s]: PathCheck: Path crosses unsafe radius: %s. Discriminant: %s. Current Position: %s. Next Position: %s. Safe Radius: %s. Vector: %s. A: %s, B: %s, C: %s.'.
                    [this.assignedcontrolled.debugname, $pathCrossesUnSafeRadius, $nextPositionDiscriminant,
                    $currentPositionRelativeToObject, $nextPositionRelativeToObject, $safeRadiusAroundObject,
                    $nextPositionDirectVector, $nextPositionA, $nextPositionB, $nextPositionC]"
          chance="$debugChance" />
        <remove_value name="$nextPositionA" />
        <remove_value name="$nextPositionB" />
        <remove_value name="$nextPositionC" />
        <remove_value name="$nextPositionDiscriminant" />
        <remove_value name="$nextPositionDirectVector" />
        <remove_value name="$currentPositionRelativeToObject" />
        <remove_value name="$nextPositionRelativeToObject" />
        <remove_value name="$safeRadiusAroundObject" />
      </actions>
      <actions name="PrepareFleeing">
        <set_value name="$isFleeing" exact="true" />
        <set_value name="$positionRelativeToPrimaryTarget" exact="this.assignedcontrolled.relativeposition.{$primaryTarget}" />
        <do_if value="@$positionMoveOutCommon == null or @$isGoOutRadius == true">
          <create_position name="$positionMoveOut"
            x="$positionRelativeToPrimaryTarget.x * 2"
            y="$positionRelativeToPrimaryTarget.y / abs($positionRelativeToPrimaryTarget.y) * $safeDistanceToPrimary *(if @$isGoOutRadius == true then 1.5m else 2.5m)"
            z="$positionRelativeToPrimaryTarget.z * 2" space="$positionRelativeToPrimaryTarget" />
        </do_if>
        <do_else>
          <set_value name="$positionMoveOut" exact="$positionMoveOutCommon" />
        </do_else>
        <debug_text
          text="'AttackStationInSector [%s]: %s: Moving out to %s from Current: %s (in Sector : %s).'.
                        [this.assignedcontrolled.debugname, if @$isGoOutRadius == true then 'SafePathMove: Unsafe step' else 'UnderAttack',
                        $positionMoveOut, $positionRelativeToPrimaryTarget, @this.assignedcontrolled.relativeposition.{$targetSector}]"
          chance="$debugChance" />
      </actions>
      <actions name="PrepareFleeingPath">
        <include_interrupt_actions ref="RefreshTargetsRelatedData" />
        <set_value name="$fleeOutFirstDistance" exact="$safeDistanceToPrimary * $safeDistanceCoefficient" />
        <create_list name="$waypoints" />
        <do_if value="this.assignedcontrolled.distanceto.{$primaryTarget} lt ($fleeOutFirstDistance * 2)">
          <do_if value="this.assignedcontrolled.boost.available">
            <set_value name="$fleeOutFirstDistanceBurst"
              exact="((this.assignedcontrolled.boost.remainingduration)f * (this.assignedcontrolled.boost.maxspeed)f) * 0.8m" />
            <do_if value="$fleeOutFirstDistanceBurst gt $fleeOutFirstDistance">
              <set_value name="$fleeOutFirstDistance" exact="$fleeOutFirstDistanceBurst" />
            </do_if>
            <remove_value name="$fleeOutFirstDistanceBurst" />
          </do_if>
          <do_if value="@$positionRelativeToPrimaryTarget == null">
            <include_interrupt_actions ref="RefreshTargetsRelatedData" />
          </do_if>
          <debug_text
            text="'AttackStationInSector [%s]: Fleeing: Boost info: Available: %s. Remaining: %s. MaxSpeed: %s. Distance: %s.'.
                    [this.assignedcontrolled.debugname, this.assignedcontrolled.boost.available,
                    this.assignedcontrolled.boost.remainingduration, this.assignedcontrolled.boost.maxspeed,
                    $fleeOutFirstDistance]"
            chance="$debugChance" />
          <create_position name="$positionPointTemporary"
            x="$positionRelativeToPrimaryTarget.x * 2"
            y="$positionRelativeToPrimaryTarget.y / abs($positionRelativeToPrimaryTarget.y) * $fleeOutFirstDistance"
            z="$positionRelativeToPrimaryTarget.z * 2" />
          <append_to_list name="$waypoints" exact="$positionPointTemporary" />
        </do_if>
        <do_if
          value="(@$temporaryFormationLeader == null or @$temporaryFormationLeader == this.assignedcontrolled or @$isGoOutRadius == true) and (@$positionPointTemporary == null or $positionMoveOut.y gt $positionPointTemporary.y)">
          <append_to_list name="$waypoints" exact="$positionMoveOut" />
          <remove_value name="$positionMoveOut" />
        </do_if>
        <remove_value name="$positionPointTemporary" />
        <set_value name="$isAttackingPosition" exact="false" />
      </actions>
      <actions name="CheckDronesAttack">
        <do_if value="@$primaryTarget != null and @$primaryTarget.zone != null">
          <find_ship name="$enemyDronesNearTarget" trueowner="$primaryTarget.trueowner"
            class="[class.ship_xs, class.ship_s]" multiple="true" recursive="true"
            space="@$primaryTarget.zone" append="true">
            <match_pilot race="race.drone" />
          </find_ship>
          <do_if value="@$primaryTarget.zone != this.assignedcontrolled.zone">
            <find_ship name="$enemyDronesNearShip" trueowner="$primaryTarget.trueowner"
              class="[class.ship_xs, class.ship_s]" multiple="true" recursive="true"
              space="this.assignedcontrolled.zone" append="true">
              <match_pilot race="race.drone" />
            </find_ship>
          </do_if>
          <do_else>
            <set_value name="$enemyDronesNearShip" exact="$enemyDronesNearTarget" />
          </do_else>
          <set_value name="$enemyDronesCount" exact="[$enemyDronesNearTarget.count, $enemyDronesNearShip.count].max" />
          <do_if value="@$enemyDronesShare == true">
            <signal_objects object="$primaryTarget" param="'EnemyDronesCount'" param2="$enemyDronesCount"
              param3="this.assignedcontrolled" />
            <set_value name="$enemyDronesCount" exact="[$enemyDronesCount, @$enemyDronesSharedCount].max" />
          </do_if>
          <do_if value="$enemyDronesCount gt 0">
            <debug_text
              text="'AttackStationInSector [%s]: DronesAttack: Found %s(%s, %s) drones in %s and %s. Other reports: %s.'.
                [this.assignedcontrolled.debugname, $enemyDronesCount, $enemyDronesNearTarget.count, $enemyDronesNearShip.count,
                $primaryTarget.zone.debugname, @this.assignedcontrolled.zone.debugname, @$enemyDronesSharedCount]"
              chance="$debugChance" />
          </do_if>
          <set_value name="$enemyDronesSharedCount" exact="0" />
          <set_value name="$dronesAttack" exact="$enemyDronesCount ge 20 and this.assignedcontrolled.isclass.ship_l" />
          <remove_value name="$enemyDronesNearTarget" />
          <remove_value name="$enemyDronesNearShip" />
        </do_if>
      </actions>
      <actions name="AvoidDronesAttack">
        <do_if value="@$isFleeing == true" negate="true">
          <include_interrupt_actions ref="CheckDronesAttack" />
          <do_if value="@$dronesAttack == true">
            <include_interrupt_actions ref="PrepareFleeing" />
            <debug_text
              text="'AttackStationInSector [%s]: DronesAttack: Drones are attacking. Fleeing out and sending signal.'.[this.assignedcontrolled.debugname]"
              chance="$debugChance" />
            <set_value name="$temporaryFormationLeader" exact="this.assignedcontrolled" />
            <break_formation object="this.assignedcontrolled" />
            <leave_formation object="this.assignedcontrolled" />
            <signal_objects object="$primaryTarget" param="'StationAttackDronesAttack'" param2="$positionMoveOut" param3="this.assignedcontrolled" />
            <set_value name="$positionMoveOutCommon" exact="$positionMoveOut" />
            <include_interrupt_actions ref="PrepareFleeingPath" />
          </do_if>
        </do_if>
      </actions>
      <actions name="CreateSideStepPosition">
        <!-- 1. Calculate vectors from blocking ship to target and to us -->
        <create_position name="$blockingToTarget" object="$targetSector"
          x="$blockedPosition.x"
          y="$blockedPosition.y"
          z="$blockedPosition.z"
          space="$sideStepTarget" />
        <set_value name="$blockingToTargetX" exact="-$blockedPosition.x" />
        <set_value name="$blockingToTargetY" exact="-$blockedPosition.y" />
        <set_value name="$blockingToTargetZ" exact="-$blockedPosition.z" />
        <create_position name="$blockingToUs" object="$targetSector"
          x="$blockedPosition.x"
          y="$blockedPosition.y"
          z="$blockedPosition.z"
          space="this.assignedcontrolled" />
        <set_value name="$blockingToUsX" exact="$blockingToUs.x" />
        <set_value name="$blockingToUsY" exact="$blockingToUs.y" />
        <set_value name="$blockingToUsZ" exact="$blockingToUs.z" />

        <!-- 2. Calculate normalized blocking-to-target vector -->
        <set_value name="$blockingToTargetMag" exact="sqrt($blockingToTargetX^2 + $blockingToTargetY^2 + $blockingToTargetZ^2)" />
        <set_value name="$blockingDirX" exact="$blockingToTargetX / $blockingToTargetMag" />
        <set_value name="$blockingDirY" exact="$blockingToTargetY / $blockingToTargetMag" />
        <set_value name="$blockingDirZ" exact="$blockingToTargetZ / $blockingToTargetMag" />

        <!-- 3. Calculate cross product of (blocking-to-us) × (blocking-to-target) -->
        <set_value name="$crossX" exact="$blockingToUsY * $blockingDirZ - $blockingToUsZ * $blockingDirY" />
        <set_value name="$crossY" exact="$blockingToUsZ * $blockingDirX - $blockingToUsX * $blockingDirZ" />
        <set_value name="$crossZ" exact="$blockingToUsX * $blockingDirY - $blockingToUsY * $blockingDirX" />

        <!-- 4. Normalize the cross product -->
        <set_value name="$crossMag" exact="sqrt($crossX^2 + $crossY^2 + $crossZ^2)" />

        <!-- Handle zero cross product case (vectors are collinear) -->
        <do_if value="$crossMag lt 0.0001">
          <debug_text
            text="'AttackStationInSector [%s]: SideStepPosition: Vectors nearly collinear, using alternative approach'.[this.assignedcontrolled.debugname]"
            chance="$debugChance" />
          <!-- Use up vector as default perpendicular -->
          <set_value name="$crossX" exact="0" />
          <set_value name="$crossY" exact="1" />
          <set_value name="$crossZ" exact="0" />
          <set_value name="$crossMag" exact="1" />
        </do_if>

        <set_value name="$perpDirX" exact="$crossX / $crossMag" />
        <set_value name="$perpDirY" exact="$crossY / $crossMag" />
        <set_value name="$perpDirZ" exact="$crossZ / $crossMag" />

        <!-- 5. Calculate the perpendicular offset (this keeps us on same side of sphere) -->
        <set_value name="$offsetX" exact="$perpDirX * $sideStepDistance" />
        <set_value name="$offsetY" exact="$perpDirY * $sideStepDistance" />
        <set_value name="$offsetZ" exact="$perpDirZ * $sideStepDistance" />

        <!-- 6. Create new position from our current position plus perpendicular offset -->
        <create_position name="$positionSideStep"
          x="$positionToSideStep.x + $offsetX"
          y="if ($positionToSideStep.y + $offsetY) le 0 then ($randomAngleTenThirty.random * $sideStepDistance / 100) else ($positionToSideStep.y + $offsetY)"
          z="$positionToSideStep.z + $offsetZ" />
        <debug_text
          text="'AttackStationInSector [%s]: SideStepPosition: Created preliminary side-step position: Original: %s, New: %s. Offsets: %s, %s, %s'.
            [this.assignedcontrolled.debugname, $positionToSideStep, $positionSideStep, $offsetX, $offsetY, $offsetZ]"
          chance="$debugChance" />
        <!-- 7. Maintain the same distance from target (normalize to sphere) -->
        <set_value name="$currentRadius" exact="sqrt($positionToSideStep.x^2 + $positionToSideStep.y^2 + $positionToSideStep.z^2)" />
        <set_value name="$newRadius" exact="sqrt($positionSideStep.x^2 + $positionSideStep.y^2 + $positionSideStep.z^2)" />
        <set_value name="$radiusRatio" exact="$currentRadius / $newRadius" />

        <create_position name="$positionSideStep"
          x="$positionSideStep.x * $radiusRatio"
          y="$positionSideStep.y * $radiusRatio"
          z="$positionSideStep.z * $radiusRatio" />

        <debug_text
          text="'AttackStationInSector [%s]: SideStepPosition: Created side-step position: Original: %s, New: %s.'.
            [this.assignedcontrolled.debugname, $positionToSideStep, $positionSideStep]"
          chance="$debugChance" />
        <!-- Clean up variables -->
        <remove_value name="$blockingToTarget" />
        <remove_value name="$blockingToTargetX" />
        <remove_value name="$blockingToTargetY" />
        <remove_value name="$blockingToTargetZ" />
        <remove_value name="$blockingToUs" />
        <remove_value name="$blockingToUsX" />
        <remove_value name="$blockingToUsY" />
        <remove_value name="$blockingToUsZ" />
        <remove_value name="$blockingToTargetMag" />
        <remove_value name="$blockingDirX" />
        <remove_value name="$blockingDirY" />
        <remove_value name="$blockingDirZ" />
        <remove_value name="$crossX" />
        <remove_value name="$crossY" />
        <remove_value name="$crossZ" />
        <remove_value name="$crossMag" />
        <remove_value name="$perpDirX" />
        <remove_value name="$perpDirY" />
        <remove_value name="$perpDirZ" />
        <remove_value name="$offsetX" />
        <remove_value name="$offsetY" />
        <remove_value name="$offsetZ" />
        <remove_value name="$currentRadius" />
        <remove_value name="$newRadius" />
        <remove_value name="$radiusRatio" />
      </actions>
      <actions name="GetRandom">
        <create_list name="$randomList" />
        <set_value name="$r" exact="$getRandomStart" />
        <do_if value="@$getRandomStep == null">
          <set_value name="$getRandomStep" exact="($getRandomEnd - $getRandomStart) / 10" />
        </do_if>
        <do_while value="$r le $getRandomEnd">
          <append_to_list name="$randomList" exact="$r" />
          <set_value name="$r" operation="add" exact="$getRandomStep" />
        </do_while>
        <set_value name="$getRandomResult" exact="$randomList.random" />
        <remove_value name="$randomList" />
        <remove_value name="$r" />
        <remove_value name="$getRandomStart" />
        <remove_value name="$getRandomEnd" />
        <remove_value name="$getRandomStep" />
      </actions>
    </library>
    <handler>
      <conditions>
        <event_object_destroyed object="$primaryTarget" />
      </conditions>
      <actions>
        <debug_text
          text="'AttackStationInSector [%s]: Target %s is destroyed. Going to finish.'.[this.assignedcontrolled.debugname, @$primaryTarget.debugname]"
          chance="$debugChance" />
        <abort_called_scripts resume="finish" />
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_object_attacked object="this.assignedcontrolled" />
        <check_any>
          <check_all>
            <set_value name="$isUnderAttack" exact="player.age" />
            <check_value value="@event.param.trueowner != this.assignedcontrolled.trueowner" />
            <check_value value="@$safetyIndicator ge 0" />
            <check_value value="@event.param == $primaryTarget" />
            <set_value name="$safetyIndicator" exact="-1" />
            <debug_text
              text="'AttackStationInSector [%s]: UnderAttack: Attacked by %s. Top Commander: %s. Safety Indicator : %s. Shield: %s. Hull: %s.'.
                [this.assignedcontrolled.debugname, @event.param.debugname, @event.param.toplevelcommander.debugname,
                $safetyIndicator, this.assignedcontrolled.shieldpercentage, this.assignedcontrolled.hullpercentage]" />
            <check_value value="false" />
          </check_all>
          <check_all>
            <check_value value="@$isFleeing == true" negate="true" />
            <check_any>
              <check_all>
                <check_value value="this.assignedcontrolled.isclass.ship_xl" />
                <check_value value="this.assignedcontrolled.shieldpercentage le 81" />
              </check_all>
              <check_all>
                <check_value value="this.assignedcontrolled.isclass.ship_l" />
                <check_value value="this.assignedcontrolled.shieldpercentage le 95" />
              </check_all>
              <check_value value="this.assignedcontrolled.hullpercentage le 99" />
              <check_all>
                <check_value value="@event.param.pilot.race == race.drone" />
                <check_value value="@event.param.toplevelcommander == $primaryTarget" />
                <check_value value="this.assignedcontrolled.isclass.ship_l" />
              </check_all>
            </check_any>
          </check_all>
          <check_all>
            <check_value value="@$isFleeing == true" />
            <check_value value="@$dronesAttack == true" />
            <check_value value="this.assignedcontrolled.isclass.ship_l" />
            <check_value value="this.assignedcontrolled.shieldpercentage le 81" />
            <check_any>
              <check_value value="this.assignedcontrolled.hullpercentage le 99" />
              <check_all>
                <check_value value="this.assignedcontrolled.distanceto.{$primaryTarget} ge $safeDistanceToPrimary * $safeDistanceCoefficient" />
                <set_value name="$rescueRequest" exact="true" />
              </check_all>
            </check_any>
          </check_all>
        </check_any>
      </conditions>
      <actions>
        <debug_text
          text="'AttackStationInSector [%s]: UnderAttack: By: %s. Shield: %s. Hull: %s on distance: %s (%s). Targets: Primary: %s. Local: %s. Is Fleeing: %s. Position: %s. Is XL: %s. Is L: %s. Rescue Request: %s.' .
            [this.assignedcontrolled.debugname, @event.param.debugname,
            this.assignedcontrolled.shieldpercentage, this.assignedcontrolled.hullpercentage,
            @event.param.bboxdistanceto.{this.assignedcontrolled}, @event.param.distanceto.{this.assignedcontrolled},
            @$primaryTarget.debugname, @$target.debugname,
            @$isFleeing, this.assignedcontrolled.relativeposition.{$targetSector},
            this.assignedcontrolled.isclass.ship_xl, this.assignedcontrolled.isclass.ship_l, @$rescueRequest]"
          chance="$debugChance" />
        <do_if
          value="@event.param.pilot.race == race.drone and @event.param.toplevelcommander == $primaryTarget and this.assignedcontrolled.isclass.ship_l and not (@$rescueRequest == true) and this.assignedcontrolled.hullpercentage gt 99">
          <set_value name="$attacker" exact="$primaryTarget" />
          <include_interrupt_actions ref="AvoidDronesAttack" />
          <do_if value="@$isFleeing == true">
            <abort_called_scripts resume="SafePathMove" />
          </do_if>
        </do_if>
        <do_if value="@$rescueRequest == true">
          <debug_text
            text="'AttackStationInSector [%s]: DronesAttack: RescueRequest to All. Shield: %s. Hull: %s.'.
              [this.assignedcontrolled.debugname, this.assignedcontrolled.shieldpercentage, this.assignedcontrolled.hullpercentage]"
            chance="$debugChance" />
          <break_formation object="this.assignedcontrolled" />
          <leave_formation object="this.assignedcontrolled" />
          <signal_objects object="$primaryTarget" param="'StationAttackRescueRequest'" param2="this.assignedcontrolled" />
          <set_value name="$rescueRequest" exact="false" />
        </do_if>
        <do_elseif value="@$isFleeing == true and this.assignedcontrolled.hullpercentage le 99">
          <debug_text
            text="'AttackStationInSector [%s]: UnderAttack: Fleeing out. Hull: %s.'.
                            [this.assignedcontrolled.debugname, this.assignedcontrolled.hullpercentage]"
            chance="$debugChance" />
          <abort_called_scripts resume="postDroneAttack" />
        </do_elseif>
        <do_elseif
          value="(this.assignedcontrolled.isclass.ship_xl and this.assignedcontrolled.shieldpercentage le 61) or
            (this.assignedcontrolled.isclass.ship_l and this.assignedcontrolled.shieldpercentage le 95) or
            this.assignedcontrolled.hullpercentage le 99">
          <set_value name="$attacker" exact="event.param" />
          <debug_text
            text="'AttackStationInSector [%s]: UnderAttack: By %s.Attacker Top Commander: %s. Too dangerous. Going out.'.
              [this.assignedcontrolled.debugname, @$attacker.debugname, @$attacker.toplevelcommander.debugname]"
            chance="$debugChance" />
          <include_interrupt_actions ref="PrepareFleeing" />
          <include_interrupt_actions ref="PrepareFleeingPath" />
          <abort_called_scripts resume="SafePathMove" />
        </do_elseif>
        <do_elseif value="this.assignedcontrolled.isclass.ship_xl and this.assignedcontrolled.shieldpercentage le 81">
          <debug_text
            text="'AttackStationInSector [%s]: UnderAttack: Too dangerous. Going to select other module.'.[this.assignedcontrolled.debugname]"
            chance="$debugChance" />
          <do_if value="@$target != null">
            <set_value name="$subTargetToExclude" exact="$target" />
          </do_if>
          <abort_called_scripts resume="acquireTarget" />
        </do_elseif>
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_object_attacked_object object="this.assignedcontrolled" />
        <check_value value="event.param == @$primaryTarget" />
        <!-- <debug_text
                    text="'AttackStationInSector [%s]: TargetIsAttacked: Method: %s. Component: %s. Weapon: %s, %s, %s, %s, %s'.
                    [this.assignedcontrolled.debugname, @event.param2, @event.param3.{1}.debugname, @event.param3.{2}.debugname, @event.param3.{2}.class,
                @event.param3.{2}.realclass, @event.param3.{2}.macro, @event.param3.{2}.grouptag]"
                /> -->
        <set_value name="$targetIsReallyAttacked" operation="add" />
        <check_value value="@event.param3.{2} != null and @event.param3.{2}.grouptag == null" />
        <set_value name="$targetIsReallyAttackedByPrimaryWeapon" operation="add" />
      </conditions>
    </handler>
    <handler>
      <conditions>
        <!-- param2 = [[$ref, $pos], $radius] param3 = asker -->
        <event_object_signalled object="this.assignedcontrolled.sector" param="'StationAttackIsPosBlocked'" check="false" />
        <check_value value="@event.param2.{1} != null and @event.param2.{2} != null and @event.param3 != null" />
        <check_value value="@event.param3 != this.assignedcontrolled" />
        <check_value value="$positionToMove?" />
        <check_value
          value="$positionToMove.distanceto.{event.param2.{1}} lt (this.assignedcontrolled.size + event.param2.{2}) * 1.5 " />
        <remove_value name="event.param3.pilot.$StationAttackListeningForAnswer" />
      </conditions>
      <actions>
        <debug_text
          text="'AttackStationInSector [%s]: PositionIsBlocked: CheckPosition: Blocked: Position: %s for %s: blocked by: %s. Distance: %s. VS: %s.'.
            [this.assignedcontrolled.debugname, event.param2.{1}, @event.param3.debugname, $positionToMove,
            @$positionToMove.distanceto.{event.param2.{1}},
            (this.assignedcontrolled.size + event.param2.{2}) * 2.5]" />
        <signal_objects object="event.param3" param="'StationAttackPosIsBlocked'" param2="[$positionToMove, this.assignedcontrolled.size]"
          param3="this.assignedcontrolled" />
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_object_signalled object="$primaryTarget" param="'StationAttackDronesAttack'" check="false" />
        <check_value value="this.assignedcontrolled.isclass.ship_l" />
        <check_value value="@event.param2 != null and @event.param3 != null" />
        <check_value value="@event.param3 != this.assignedcontrolled" />
        <set_value name="$isFleeing" exact="true" />
        <set_value name="$dronesAttack" exact="true" />
      </conditions>
      <actions>
        <debug_text
          text="'AttackStationInSector [%s]: DronesAttack: Position to Flee: %s. Out from: %s. Sent by: %s.'.
            [this.assignedcontrolled.debugname, @event.param2, $primaryTarget.debugname, @event.param3.debugname]" />
        <do_if value="@$positionMoveOutCommon == null">
          <set_value name="$positionMoveOutCommon" exact="@event.param2" />
        </do_if>
        <set_value name="$positionMoveOut" exact="$positionMoveOutCommon" />
        <set_value name="$temporaryFormationLeader" exact="@event.param3" />
        <set_value name="$attacker" exact="$primaryTarget" />
        <include_interrupt_actions ref="PrepareFleeingPath" />
        <abort_called_scripts resume="SafePathMove" />
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_object_signalled object="$primaryTarget" param="'StationAttackRescueRequest'" check="false" />
        <check_value value="this.assignedcontrolled.isclass.ship_l" />
        <check_value value="@event.param2 != null and @event.param2 != this.assignedcontrolled" />
        <check_value value="this.assignedcontrolled.hullpercentage == 100" />
        <check_value value="this.assignedcontrolled.shieldpercentage gt 95" />
        <check_value value="@$isFleeing == true" />
        <check_value value="@$dronesAttack == true" />
      </conditions>
      <actions>
        <debug_text
          text="'AttackStationInSector [%s]: DronesAttack: RescueRequest from %s.'.[this.assignedcontrolled.debugname, @event.param.debugname]" />
        <break_formation object="this.assignedcontrolled" />
        <leave_formation object="this.assignedcontrolled" />
        <signal_objects object="@$temporaryFormationLeader" param="'FleeingFormationJoin'" param2="this.assignedcontrolled" />
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_object_signalled object="this.assignedcontrolled" param="'FleeingFormationJoin'" />
        <check_value value="@$temporaryFormationLeader == this.assignedcontrolled" />
        <check_value value="@event.param2 != null" />
      </conditions>
      <actions>
        <debug_text
          text="'AttackStationInSector [%s]: DronesAttack: FleeingFormation: Fleeing formation join request from: %s. Already is: %s.'.
            [this.assignedcontrolled.debugname, @event.param2.debugname, @$fleeingFormationList.count]" />
        <do_if value="@$fleeingFormationList == null">
          <create_list name="$fleeingFormationList" />
          <create_formation leader="this.assignedcontrolled" follower="event.param2" formation="formationshape.circle" param="this.assignedcontrolled.size * 4" />
        </do_if>
        <do_else>
          <join_formation object="@event.param2" leader="this.assignedcontrolled" />
        </do_else>
        <append_to_list name="$fleeingFormationList" exact="event.param2" />
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_object_signalled object="$primaryTarget" param="'EnemyDronesCount'" />
        <check_value value="event.param3 != this.assignedcontrolled" />
        <check_value value="@$enemyDronesShare == true" />
        <set_value name="$enemyDronesSharedCount" exact="[@$enemyDronesSharedCount, event.param2].max" />
      </conditions>
    </handler>
    <handler>
      <conditions>
        <event_object_signalled object="this.assignedcontrolled" param="'StationAttackIsFinished'" />
        <check_value value="@event.param2 != null" />
        <check_value value="@event.param2 != this.assignedcontrolled" />
      </conditions>
      <actions>
        <debug_text
          text="'AttackStationInSector [%s]: Attack finished for %s. Reassigning them (and other).'. [this.assignedcontrolled.debugname, @event.param2.debugname]" />
        <include_interrupt_actions ref="AssignSubordinatesToAttackStation" />
      </actions>
    </handler>
    <handler ref="DisengageHandler" />
    <handler ref="TargetInvalidHandler" />
  </interrupts>
  <init>
    <set_value name="$target" exact="null" />
    <set_value name="$updateTime" exact="if this.assignedcontrolled.isclass.ship_xl then 60s else 30s" />
    <set_value name="$targetIsReallyAttacked" exact="0" />
    <set_value name="$targetIsReallyAttackedByPrimaryWeapon" exact="0" />
    <create_list name="$randomFullCircle" />
    <set_value name="$r" exact="-180" />
    <do_while value="$r le 180">
      <append_to_list name="$randomFullCircle" exact="$r" />
      <set_value name="$r" operation="add" exact="10" />
    </do_while>
    <create_list name="$randomAngleThirtySixty" />
    <set_value name="$r" exact="30" />
    <do_while value="$r le 60">
      <append_to_list name="$randomAngleThirtySixty" exact="$r" />
      <set_value name="$r" operation="add" exact="5" />
    </do_while>
    <create_list name="$randomAngleTenThirty" />
    <set_value name="$r" exact="10" />
    <do_while value="$r le 30">
      <append_to_list name="$randomAngleTenThirty" exact="$r" />
      <set_value name="$r" operation="add" exact="2" />
    </do_while>
    <set_value name="$isUnderAttack" exact="player.age - 3s" />
    <set_value name="$safeDistanceCoefficient" exact="if this.assignedcontrolled.isclass.ship_l then 1.2m else 1.5m" />
    <set_value name="$attackTimeStamp" exact="0s" />
  </init>
  <attention min="unknown">
    <actions>
      <break_formation object="this.assignedcontrolled" />
      <leave_formation object="this.assignedcontrolled" />
      <debug_text
        text="'AttackStationInSector [%s]: Starting attack on %s. Defence NPC: %s (%s).'.
          [this.assignedcontrolled.debugname, @$primaryTarget.debugname,
          @this.assignedcontrolled.defencenpc.name, @this.assignedcontrolled.defencenpc]"
        chance="$debugChance" />
      <set_value name="$targetSector" exact="$primaryTarget.sector" />
      <label name="approachingTarget" />
      <remove_value name="$positionForAttack" />
      <do_if
        value="@$primaryTarget == null or @$primaryTarget.iswreck or not @$primaryTarget.isrealclass.station">
        <debug_text
          text="'AttackStationInSector [%s]: target %s cannot be attacked. Is Operational: %s. Is Wreck: %s. Real Class: %s (%s). Class: %s)'
            .[this.assignedcontrolled.debugname, @$primaryTarget.debugname, @$primaryTarget.isoperational, @$primaryTarget.iswreck,
            @$primaryTarget.realclass, @$primaryTarget.isrealclass.station, @$primaryTarget.class]"
          chance="$debugChance" />
        <resume label="finish" />
      </do_if>

      <set_value name="$attackTimeStamp" exact="0s" />

      <do_if value="@$temporaryFormationLeader != null">
        <set_value name="$dronesAttack" exact="true" />
        <resume label="fleeOut" />
      </do_if>

      <label name="fight" />
      <label name="acquireTarget" />

      <include_interrupt_actions ref="AssignSubordinatesToAttackStation" />
      <set_drone_armed object="this.assignedcontrolled" category="unitcategory.defence" armed="false" />
      <set_value name="$isAttackingPosition" exact="false" />

      <include_interrupt_actions ref="AvoidDronesAttack" />
      <do_if value="@$isFleeing == true">
        <resume label="SafePathMove" />
      </do_if>

      <remove_value name="$positionForAttackInitial" />
      <set_command command="command.attackobject" param="$primaryTarget" />
      <set_command_action commandaction="commandaction.calculating" />
      <remove_value name="$positionToMove" />
      <do_if value="not $primaryTarget.exists or $primaryTarget.iswreck">
        <debug_text
          text="'AttackStationInSector [%s]: Target %s was destroyed. Breaking off attack.'.[this.assignedcontrolled.debugname, $primaryTarget.debugname]"
          chance="$debugChance" />
        <resume label="finish" />
      </do_if>

      <include_interrupt_actions ref="RefreshTargetsRelatedData" />


      <do_if value="this.assignedcontrolled.sector != $targetSector">
        <debug_text
          text="'AttackStationInSector [%s]: Target %s is not in the same sector. Exiting.'.[this.assignedcontrolled.debugname, $primaryTarget.debugname]"
          chance="$debugChance" />
        <resume label="finish" />
      </do_if>

      <set_value name="$skillPiloting" exact="this.skill.piloting" />
      <set_value name="$skillMorale" exact="this.skill.morale" />
      <set_value name="$skillCombined" exact="this.assignedcontrolled.combinedskill" />

      <!-- calculate best quadrant to use against the target -->
      <set_value name="$quadrants" exact="[quadrant.left, quadrant.right, quadrant.front]" />
      <set_value name="$quadrantTable" exact="table[]" />

      <!-- check this turrets -->
      <do_all exact="$quadrants.count" counter="$i">
        <set_value name="$quadrantTable.{$quadrants.{$i}}" exact="this.ship.dps.turrets.{$quadrants.{$i}}" />
      </do_all>
      <!-- best quadrant -->
      <set_value name="$bestQuadrant" exact="$quadrantTable.keys.sorted.last" />

      <set_value name="$quadrants" exact="[quadrant.left, quadrant.right, quadrant.up, quadrant.down, quadrant.back, quadrant.front]" />
      <set_value name="$dpsLasers" exact="this.ship.dps.lasers.all" />
      <set_value name="$dpsMissiles" exact="this.ship.dps.missiles.all" />
      <do_if value="$dpsLasers and $dpsMissiles">
        <set_value name="$bestQuadrant" exact="quadrant.front" />
        <set_value name="$frontWeapon" exact="1" />
        <do_if value="$dpsMissiles gt $dpsLasers">
          <set_value name="$frontWeapon" exact="2" />
        </do_if>
      </do_if>
      <do_else>
        <do_if value="$dpsLasers">
          <!-- if forward weapons are available, always manoeuver to orient forward weapons on big targets. -->
          <set_value name="$bestQuadrant" exact="quadrant.front" />
          <set_value name="$frontWeapon" exact="1" />
        </do_if>
        <do_if value="$dpsMissiles">
          <!-- works even if missile launchers are not front-mounted. will only fail if missile launchers can only fire to the
                    rear. -->
          <set_value name="$bestQuadrant" exact="quadrant.front" />
          <set_value name="$frontWeapon" exact="2" />
        </do_if>
      </do_else>
      <debug_text
        text="'AttackStationInSector [%s]: Best quadrant: %s. Front Weapon: %s. DPS: missiles: %s, lasers: %s'.
          [this.assignedcontrolled.debugname, $bestQuadrant, @$frontWeapon, $dpsMissiles, $dpsLasers]" />
      <remove_value name="$dpsMissiles" />
      <remove_value name="$dpsLasers" />

      <do_if value="not @$frontWeapon" chance="[$skillCombined + 50, 100].min">
        <!-- NB: if we are using a front-mounted weapon, we have to align with the target's y-plane. otherwise, we can fly above or
            below the target. some capital ships have turrets concentrated above or below their hulls. while design demands that capital
            ships align themselves to ecliptic, nothing stopping us from flying above or below the target. -->
        <set_value name="$verticalQuadrants" exact="[quadrant.up, quadrant.down]" />
        <set_value name="$verticalQuadrantTable" exact="table[]" />
        <do_all exact="$verticalQuadrants.count" counter="$i">
          <set_value name="$verticalQuadrantTable.{$verticalQuadrants.{$i}}"
            exact="this.ship.dps.turrets.{$verticalQuadrants.{$i}}" />
        </do_all>
        <!-- best quadrant -->
        <set_value name="$bestVerticalQuadrant" exact="$verticalQuadrantTable.keys.sorted.last" />
        <do_if value="$quadrantTable.{$bestQuadrant} gt $verticalQuadrantTable.{$bestVerticalQuadrant}">
          <set_value name="$bestVerticalQuadrant" exact="null" />
        </do_if>
        <debug_text
          text="'AttackStationInSector [%s]: Best quadrant: Vertical: %s with dps %s. Horizontal: %s with dps: %s'.
            [this.assignedcontrolled.debugname, $bestVerticalQuadrant, @$verticalQuadrantTable.{$bestVerticalQuadrant}, $bestQuadrant, $quadrantTable.{$bestQuadrant}]"
          chance="$debugChance" />
      </do_if>

      <do_if value="not @$frontWeapon and ($bestQuadrant == quadrant.front) and not @$bestVerticalQuadrant">
        <set_value name="$frontWeapon" exact="3" />
      </do_if>
      <debug_text
        text="'frontWeapon [%s]: Front Weapon: %s. Max range: Lasers : %s . Missiles : %s. All: %s'.
          [this.assignedcontrolled.debugname, $frontWeapon, this.assignedcontrolled.maxcombatrange.lasers.all, this.assignedcontrolled.maxcombatrange.missiles.all, this.assignedcontrolled.maxcombatrange.all]"
        chance="$debugChance" />

      <set_value name="$maxEffectiveCombatRange" exact="this.assignedcontrolled.maxcombatrange.all" />
      <do_if value="@$frontWeapon == 1">
        <set_value name="$maxEffectiveCombatRange" exact="this.assignedcontrolled.maxcombatrange.lasers.all" />
      </do_if>

      <do_if value="$frontWeapon != 3">
        <!-- adjust $maxEffectiveCombatRange by the distance of the weapon farthest from the front of the ship -->
        <set_value name="$weaponDistance" exact="0m" />
        <set_value name="$weaponsList" exact="this.assignedcontrolled.weapons.operational.list" />
        <do_for_each name="$weaponItem" in="$weaponsList" reverse="true">
          <do_if value="not $weaponItem.isclass.turret and not $weaponItem.iswreck and @$weaponItem.isinactiveweapongroup">
            <set_value name="$weaponDist" exact="$weaponItem.relativeposition.{this.assignedcontrolled}.z" />
            <set_value name="$weaponDist" exact="this.assignedcontrolled.length/2m - $weaponDist" />
            <do_if value="$weaponDist gt $weaponDistance">
              <set_value name="$weaponDistance" exact="$weaponDist" />
            </do_if>
            <remove_value name="$weaponDist" />
          </do_if>
          <wait exact="10ms" />
        </do_for_each>
        <set_value name="$maxEffectiveCombatRange"
          exact="[$maxEffectiveCombatRange - $weaponDistance * 2, $maxEffectiveCombatRange * 0.1].max" />
        <debug_text
          text="'AttackStationInSector [%s]: Max Effective Combat Range: %s. Weapon Distance: %s'.
            [this.assignedcontrolled.debugname, $maxEffectiveCombatRange, $weaponDistance]"
          chance="$debugChance" />
        <remove_value name="$weaponsList" />
        <remove_value name="$weaponDistance" />
      </do_if>

      <include_interrupt_actions ref="RefreshTargetsRelatedData" />
      <debug_text
        text="'AttackStationInSector [%s]: Target %s has a max effective combat range of %s, size/2: %s'.
          [this.assignedcontrolled.debugname, $primaryTarget.debugname, $maxEffectiveTargetCombatRange, $primaryTargetRadius]"
        chance="$debugChance" />
      <do_if value="$maxEffectiveTargetCombatRange gt $maxEffectiveCombatRange">
        <debug_text
          text="'AttackStationInSector [%s]: Target %s has a max effective combat range of %sm biggest than our %sm. Breaking the attack.'.
            [$primaryTarget.debugname, $primaryTarget, $maxEffectiveTargetCombatRange, $maxEffectiveCombatRange]"
          chance="$debugChance" />
        <!-- <resume label="finish" /> -->
      </do_if>

      <set_value name="$excludedComponents" exact="[]" />
      <do_if value="@$subTargetToExclude != null">
        <append_to_list name="$excludedComponents" exact="$subTargetToExclude" />
        <debug_text
          text="'AttackStationInSector [%s]: Excluding %s from target list for this turn.'.[this.assignedcontrolled.debugname, $subTargetToExclude.debugname]"
          chance="$debugChance" />
        <remove_value name="$subTargetToExclude" />
      </do_if>

      <include_interrupt_actions ref="RefreshTargetsRelatedData" />
      <debug_text
        text="'AttackStationInSector [%s]: Distance to Primary Target: %s. Safe distance: %s. Primary target: Position: %s. Rotation: %s'.
          [this.assignedcontrolled.debugname, $currentDistanceToPrimary,
          $safeDistanceToPrimary,
          @$positionPrimaryTargetInSector, @$primaryTarget.rotation.{$targetSector}]"
        chance="$debugChance" />
      <label name="recheckComponents" />
      <remove_value name="$components" />
      <find_object_component name="$components"
        object="$primaryTarget" checkoperational="false" integrated="false"
        indestructible="false" invulnerable="false"
        sortbyvalue="loop.element.distanceto.{$primaryTarget} * (if loop.element.relativeposition.{$primaryTarget}.y lt 0 then -1 else 1)"
        excluded="$excludedComponents" append="true" multiple="true" recursive="true" sortdescending="true">
        <match module="true" />
        <match state="componentstate.wreck" negate="true" />
      </find_object_component>

      <debug_text
        text="'AttackStationInSector [%s]: Target %s has %s components. Distance to: %s, Size/2: %s.'.
          [this.assignedcontrolled.debugname, $primaryTarget.debugname, $components.count, $primaryTarget.distanceto.{this.assignedcontrolled}, $primaryTargetRadius]"
        chance="$debugChance" />
      <do_if value="$components.count == 0">
        <do_if value="($excludedComponents.count gt 0) and not $primaryTarget.iswreck">
          <clear_list list="$excludedComponents" />
          <resume label="recheckComponents" />
        </do_if>
        <resume label="finish" />
      </do_if>
      <!-- <shuffle_list list="$components" /> -->
      <set_value name="$getRandomStart" exact="1" />
      <set_value name="$getRandomEnd" exact="[$components.count, 5].min" />
      <set_value name="$getRandomStep" exact="1" />
      <include_interrupt_actions ref="GetRandom" />
      <set_value name="$target" exact="@$components.{$getRandomResult}" />
      <remove_value name="$getRandomResult" />
      <include_interrupt_actions ref="RefreshTargetsRelatedData" />
      <set_value name="$targetToPrimaryDistance" exact="$target.distanceto.{$primaryTarget}" />
      <debug_text
        text="'AttackStationInSector [%s]: Target: %s. Distance to: %s. Radius: %s. Relative Position: %s (%s). Relative distance: %s.'.
          [this.assignedcontrolled.debugname, $target.debugname, $target.distanceto.{this.assignedcontrolled}, $targetRadius,
          $positionTargetRelativeToPrimaryTarget, $positionRelativeToPrimaryTarget, $targetToPrimaryDistance]"
        chance="$debugChance" />
      <do_if value="$targetToPrimaryDistance le 0">
        <set_value name="$interimX" exact="$positionRelativeToPrimaryTarget.x" />
        <set_value name="$interimZ" exact="$positionRelativeToPrimaryTarget.z" />
      </do_if>
      <do_else>
        <set_value name="$interimX" exact="$positionTargetRelativeToPrimaryTarget.x" />
        <set_value name="$interimZ" exact="$positionTargetRelativeToPrimaryTarget.z" />
      </do_else>
      <set_value name="$interimRandomAngleGrad" exact="$randomFullCircle.random" />
      <set_value name="$interimRandomAngle" exact="($interimRandomAngleGrad * 0.0174533)rad" />
      <set_value name="$interimRandomAngleSin" exact="sin($interimRandomAngle)" />
      <set_value name="$interimRandomAngleCos " exact="cos($interimRandomAngle)" />
      <set_value name="$interimX" exact="$interimX * $interimRandomAngleCos - $interimZ * $interimRandomAngleSin" />
      <set_value name="$interimZ" exact="$interimX * $interimRandomAngleSin + $interimZ * $interimRandomAngleCos" />
      <set_value name="$interimRandomAngleVertical" exact="$randomAngleThirtySixty.random" />
      <create_position name="$interimPositionRelativeToPrimaryTarget"
        x="$interimX"
        y="sqrt($interimX^2 + $interimZ^2) * tan($interimRandomAngleVertical * 0.0174533)"
        z="$interimZ" />
      <debug_text
        text="'AttackStationInSector [%s]: Target %s - module of Primary target %s. Distance to Primary: %s. Relative Interim position: %s. Angles: H: %s. V: %s.'.
          [this.assignedcontrolled.debugname, $target.debugname, $primaryTarget.debugname, $targetToPrimaryDistance,
          $interimPositionRelativeToPrimaryTarget, $interimRandomAngleGrad, $interimRandomAngleVertical]"
        chance="$debugChance" />
      <remove_value name="$interimX" />
      <remove_value name="$interimZ" />
      <remove_value name="$interimRandomAngle" />
      <remove_value name="$interimRandomAngleGrad" />
      <remove_value name="$interimRandomAngleVertical" />
      <remove_value name="$interimRandomAngleSin" />
      <remove_value name="$interimRandomAngleCos" />
      <set_value name="$interimPositionRelativeToPrimaryTargetDistance"
        exact="sqrt($interimPositionRelativeToPrimaryTarget.x^2 + $interimPositionRelativeToPrimaryTarget.y^2 + $interimPositionRelativeToPrimaryTarget.z^2)" />
      <set_value name="$interimPositionRelativeToPrimaryTargetDistanceRatio"
        exact="$safeDistanceToPrimary * $safeDistanceCoefficient / $interimPositionRelativeToPrimaryTargetDistance" />
      <create_position name="$interimPositionRelativeToPrimaryTarget"
        x="$interimPositionRelativeToPrimaryTarget.x * $interimPositionRelativeToPrimaryTargetDistanceRatio"
        y="$interimPositionRelativeToPrimaryTarget.y * $interimPositionRelativeToPrimaryTargetDistanceRatio"
        z="$interimPositionRelativeToPrimaryTarget.z * $interimPositionRelativeToPrimaryTargetDistanceRatio" />
      <set_value name="$interimPositionRelativeToPrimaryTargetDistanceNew"
        exact="sqrt($interimPositionRelativeToPrimaryTarget.x^2 + $interimPositionRelativeToPrimaryTarget.y^2 + $interimPositionRelativeToPrimaryTarget.z^2)" />
      <create_position name="$interimPosition"
        x="$positionPrimaryTargetInSector.x + $interimPositionRelativeToPrimaryTarget.x"
        y="$positionPrimaryTargetInSector.y + $interimPositionRelativeToPrimaryTarget.y"
        z="$positionPrimaryTargetInSector.z + $interimPositionRelativeToPrimaryTarget.z"
      />
      <debug_text
        text="'AttackStationInSector [%s]: Interim position: %s (%s, Distance: %s (%s), Ratio: %s). Primary Target: %s. Target: %s (%s). Our: %s. Distance to: From Primary Target: %s. From Target: %s. From Ship To Primary: %s.'.
          [this.assignedcontrolled.debugname, $interimPosition, $interimPositionRelativeToPrimaryTarget,
          $interimPositionRelativeToPrimaryTargetDistance, $interimPositionRelativeToPrimaryTargetDistanceNew, $interimPositionRelativeToPrimaryTargetDistanceRatio,
          @$positionPrimaryTargetInSector, @$target.relativeposition.{$targetSector}, @$positionTargetRelativeToPrimaryTarget,
          $positionRelativeToPrimaryTarget,
          $primaryTarget.distanceto.{[$targetSector, $interimPosition]},  $target.distanceto.{[$targetSector, $interimPosition]},
          $currentDistanceToPrimary ]"
        chance="$debugChance" />
      <set_value name="$currentPositionRelativeToObject" exact="$positionRelativeToPrimaryTarget" />
      <set_value name="$nextPositionRelativeToObject" exact="$interimPositionRelativeToPrimaryTarget" />
      <set_value name="$safeRadiusAroundObject" exact="$safeDistanceToPrimary" />
      <remove_value name="$interimPositionRelativeToPrimaryTargetDistanceRatio" />
      <remove_value name="$interimPositionRelativeToPrimaryTargetDistanceNew" />
      <remove_value name="$interimPositionRelativeToPrimaryTargetDistance" />
      <include_interrupt_actions ref="CheckIfPathCrossedUnsafeRadius" />
      <create_list name="$waypoints" />
      <do_if value="$pathCrossesUnSafeRadius">
        <!-- Set safe distance (slightly larger than danger radius) -->
        <set_value name="$safePathSafeDistance"
          exact="$safeDistanceToPrimary * $safeDistanceCoefficient" />
        <debug_text
          text="'AttackStationInSector [%s]: SafePath: Path crosses unsafe radius. Generating safe path with distance: %s'.
            [this.assignedcontrolled.debugname, $safePathSafeDistance]"
          chance="$debugChance" />

        <!-- Calculate magnitudes (distances from origin to points) -->
        <set_value name="$startMagnitude"
          exact="sqrt($positionRelativeToPrimaryTarget.x^2 + $positionRelativeToPrimaryTarget.y^2 + $positionRelativeToPrimaryTarget.z^2)" />
        <set_value name="$endMagnitude"
          exact="sqrt($interimPositionRelativeToPrimaryTarget.x^2 + $interimPositionRelativeToPrimaryTarget.y^2 + $interimPositionRelativeToPrimaryTarget.z^2)" />

        <!-- Calculate normalized vectors (unit directions from origin) -->
        <set_value name="$vectorStart"
          exact="[
                      $positionRelativeToPrimaryTarget.x / $startMagnitude,
                      $positionRelativeToPrimaryTarget.y / $startMagnitude,
                      $positionRelativeToPrimaryTarget.z / $startMagnitude
                  ]" />

        <set_value name="$vectorEnd"
          exact="[
                      $interimPositionRelativeToPrimaryTarget.x / $endMagnitude,
                      $interimPositionRelativeToPrimaryTarget.y / $endMagnitude,
                      $interimPositionRelativeToPrimaryTarget.z / $endMagnitude
                  ]" />
        <!-- Compute the rotation axis as the cross product of v1 and v2 -->
        <set_value name="$rotationAxis"
          exact="[
                      $vectorStart.{2} * $vectorEnd.{3} - $vectorStart.{3} * $vectorEnd.{2},
                      $vectorStart.{3} * $vectorEnd.{1} - $vectorStart.{1} * $vectorEnd.{3},
                      $vectorStart.{1} * $vectorEnd.{2} - $vectorStart.{2} * $vectorEnd.{1}
                  ]"
        />
        <set_value name="$rotationAxisMagnitude" exact="sqrt($rotationAxis.{1}^2 + $rotationAxis.{2}^2 + $rotationAxis.{3}^2)" />
        <set_value name="$rotationAxis"
          exact="[$rotationAxis.{1} / $rotationAxisMagnitude, $rotationAxis.{2} / $rotationAxisMagnitude, $rotationAxis.{3} / $rotationAxisMagnitude]" />
        <!-- Calculate dot product and angle between vectors -->
        <set_value name="$dotProduct" exact="$vectorStart.{1} * $vectorEnd.{1} + $vectorStart.{2} * $vectorEnd.{2} + $vectorStart.{3} * $vectorEnd.{3}" />
        <!-- <set_value name="$dotProduct" exact="[$dotProduct, -1].max" />
                    <set_value name="$dotProduct" exact="[$dotProduct, 1].min" /> -->
        <set_value name="$angleRad" exact="acos($dotProduct)" />
        <set_value name="$angleDeg" exact="$angleRad * 57.2957795" />
        <!-- Determine rotation direction using sign of cross(vectorStart, axis) ⋅ v2 -->
        <set_value name="$crossAxisVectorStart"
          exact="[
                      $rotationAxis.{2} * $vectorStart.{3} - $rotationAxis.{3} * $vectorStart.{2},
                      $rotationAxis.{3} * $vectorStart.{1} - $rotationAxis.{1} * $vectorStart.{3},
                      $rotationAxis.{1} * $vectorStart.{2} - $rotationAxis.{2} * $vectorStart.{1}
                  ]" />
        <set_value name="$crossDotProduct"
          exact="$crossAxisVectorStart.{1} * $vectorEnd.{1} + $crossAxisVectorStart.{2} * $vectorEnd.{2} + $crossAxisVectorStart.{3} * $vectorEnd.{3}" />
        <set_value name="$pathDirection" exact="if $crossDotProduct gt 0 then 1 else -1" />
        <!-- dot(axis, vectorStart) scalar projection -->
        <set_value name="$dotAxisVectorStart"
          exact="$rotationAxis.{1} * $vectorStart.{1} + $rotationAxis.{2} * $vectorStart.{2} + $rotationAxis.{3} * $vectorStart.{3}" />
        <!-- Calculate number of waypoints based on angle (every 30 degrees) -->
        <set_value name="$numSegments" exact="($angleDeg / 30)i" />
        <set_value name="$numWaypoints" exact="if ( ($numSegments gt 0) and ( ($angleDeg - $numSegments * 30) lt 5) ) then $numSegments - 1 else $numSegments" />
        <set_value name="$stepInRad" exact="pi / 6" />

        <debug_text
          text="'AttackStationInSector [%s]: SafePath: Angle between vectors: %s degrees, using %s waypoints in direction: %s. Rotation axis: %s. Cross Axis Vector: %s. Dot Axis Vector: %s.'.
            [this.assignedcontrolled.debugname, $angleDeg, $numWaypoints, $pathDirection, $rotationAxis, $crossAxisVectorStart, $dotAxisVectorStart]"
          chance="$debugChance" />
        <debug_text
          text="'AttackStationInSector [%s]: SafePath: Starting position: %s'.
            [this.assignedcontrolled.debugname, $positionRelativeToPrimaryTarget]"
          chance="$debugChance" />
        <set_value name="$distanceToPrimaryTargetRaw" exact="$primaryTarget.distanceto.{this.assignedcontrolled}" />
        <do_if value="$distanceToPrimaryTargetRaw le $safePathSafeDistance">
          <create_position name="$waypointZero"
            x="$positionRelativeToPrimaryTarget.x * $safePathSafeDistance / $distanceToPrimaryTargetRaw"
            y="$positionRelativeToPrimaryTarget.y * $safePathSafeDistance / $distanceToPrimaryTargetRaw"
            z="$positionRelativeToPrimaryTarget.z * $safePathSafeDistance / $distanceToPrimaryTargetRaw" />
          <debug_text
            text="'AttackStationInSector [%s]: SafePath: Current raw distance %s to Primary too small. Safe: %s. Adding waypoint 0: %s, to get out of station.'.
              [this.assignedcontrolled.debugname, $distanceToPrimaryTargetRaw, $safePathSafeDistance, $waypointZero]"
            chance="$debugChance" />
          <append_to_list name="$waypoints" exact="$waypointZero" />
        </do_if>
        <!-- Generate waypoints using spherical linear interpolation -->
        <do_all exact="$numWaypoints" counter="$i">
          <!-- Calculate the angular fraction for this waypoint -->
          <set_value name="$theta" exact="($i * $stepInRad * $pathDirection)rad" />
          <set_value name="$thetaCos" exact="cos($theta)" />
          <set_value name="$thetaSin" exact="sin($theta)" />

          <!-- Rodrigues' rotation formula (manual vector math using 1-based index)-->
          <set_value name="$rodriguesRotated" exact="[0,0,0]" />

          <do_all exact="3" counter="$j">
            <set_value name="$rodriguesRotated.{$j}"
              exact="($vectorStart.{$j} * $thetaCos) + $crossAxisVectorStart.{$j} * $thetaSin + ($rotationAxis.{$j} * $dotAxisVectorStart * (1 - $thetaCos))" />
          </do_all>
          <!-- Create waypoint at safe distance -->
          <create_position name="$waypoint"
            object="$primaryTarget"
            x="$rodriguesRotated.{1} * $safePathSafeDistance"
            y="$rodriguesRotated.{2} * $safePathSafeDistance"
            z="$rodriguesRotated.{3} * $safePathSafeDistance"
            space="$primaryTarget" />

          <append_to_list name="$waypoints" exact="$waypoint" />

          <debug_text
            text="'AttackStationInSector [%s]: SafePath: Added %s waypoint: %s. Distance: %s. Angle: %s (%s) (Sin: %s, Cos: %s). Rodrigues rotation: %s.'.
              [this.assignedcontrolled.debugname, $i, $waypoint, $primaryTarget.distanceto.{[$primaryTarget, $waypoint]},
              $theta, $theta * 57.2957795, $thetaSin, $thetaCos, $rodriguesRotated]"
            chance="$debugChance" />
          <wait exact="50ms" />
          <include_interrupt_actions ref="AvoidDronesAttack" />
          <do_if value="@$isFleeing == true">
            <resume label="SafePathMove" />
          </do_if>
        </do_all>
      </do_if>
      <do_else>
        <debug_text
          text="'AttackStationInSector [%s]: Path does not cross unsafe radius. Going directly to InterimPosition: %s from %s.' .
            [this.assignedcontrolled.debugname, $interimPosition, this.assignedcontrolled.relativeposition.{$targetSector}]"
          chance="$debugChance" />
      </do_else>
      <append_to_list name="$waypoints" exact="$interimPositionRelativeToPrimaryTarget" />
      <debug_text
        text="'AttackStationInSector [%s]: SafePath: Final position: %s'.[this.assignedcontrolled.debugname, $interimPositionRelativeToPrimaryTarget]"
        chance="$debugChance" />
      <debug_text
        text="'AttackStationInSector [%s]: SafePath. Going via WayPoints: %s.'.
          [this.assignedcontrolled.debugname, $waypoints]"
        chance="$debugChance" />
      <wait exact="20ms" />
      <set_value name="$isAttackingPosition" exact="false" />
      <label name="SafePathMove" />
      <remove_value name="$positionForAttackInitial" />
      <set_value name="$safetyIndicator" exact="1" />
      <do_for_each name="$pathWaypoint" in="$waypoints" counter="$i">
        <include_interrupt_actions ref="AssignSubordinatesToAttackStation" />
        <include_interrupt_actions ref="RefreshTargetsRelatedData" />
        <set_command command="command.attackobject" param="$primaryTarget" />
        <set_command_action commandaction="commandaction.flying" />
        <remove_value name="$positionToMove" />
        <debug_text
          text="'AttackStationInSector [%s]: SafePathMove: Path waypoint [%s/%s]: %s. Is Fleeing: %s. Is Go Out: %s. Is Attacking Position: %s.'.
            [this.assignedcontrolled.debugname, $i, $waypoints.count, $pathWaypoint, @$isFleeing, @$isGoOutRadius, $isAttackingPosition]"
          chance="$debugChance" />
        <do_if value="$isAttackingPosition">
          <create_position name="$positionToMovePreliminary" object="$target"
            x="$pathWaypoint.x"
            y="$pathWaypoint.y"
            z="$pathWaypoint.z"
            space="$targetSector" />
          <!-- Check if the position is already occupied by the other ship -->
        </do_if>
        <do_else>
          <create_position name="$positionToMovePreliminary" object="$primaryTarget"
            x="$pathWaypoint.x"
            y="$pathWaypoint.y"
            z="$pathWaypoint.z"
            space="$targetSector" />
        </do_else>
        <set_value name="$waypointDistance" exact="$primaryTarget.bboxdistanceto.{[$targetSector, $positionToMovePreliminary]}" />
        <create_position name="$positionToMoveRelative" object="$targetSector"
          x="$positionToMovePreliminary.x"
          y="$positionToMovePreliminary.y"
          z="$positionToMovePreliminary.z"
          space="$primaryTarget" />
        <debug_text
          text="'AttackStationInSector [%s]: SafePathMove: DistanceCheck: Path waypoint [%s/%s]: %s. Position to move: %s (%s). Distance To Primary: %s (%s). Primary Max Range: %s.'.
            [this.assignedcontrolled.debugname, $i, $waypoints.count, $pathWaypoint, $positionToMovePreliminary, $positionToMoveRelative,
            $waypointDistance, $primaryTarget.distanceto.{[$targetSector, $positionToMovePreliminary]},
            $maxEffectiveTargetCombatRange
            ]"
          chance="$debugChance" />
        <do_if value="(@$isFleeing or @$isGoOutRadius) and ($i == 1)" negate="true">
          <do_if value="($maxEffectiveTargetCombatRange * 1.2) ge $waypointDistance">
            <set_value name="$waypointDistanceRatio" exact="$maxEffectiveTargetCombatRange * 1.3 / $waypointDistance" />
            <do_if value="$isAttackingPosition">
              <create_position name="$positionToMovePreliminary" object="$target"
                x="$pathWaypoint.x * $waypointDistanceRatio"
                y="$pathWaypoint.y * $waypointDistanceRatio"
                z="$pathWaypoint.z * $waypointDistanceRatio"
                space="$targetSector" />
              <!-- Check if the position is already occupied by the other ship -->
            </do_if>
            <do_else>
              <create_position name="$positionToMovePreliminary" object="$primaryTarget"
                x="$pathWaypoint.x * $waypointDistanceRatio"
                y="$pathWaypoint.y * $waypointDistanceRatio"
                z="$pathWaypoint.z * $waypointDistanceRatio"
                space="$targetSector" />
            </do_else>
            <debug_text
              text="'AttackStationInSector [%s]: SafePathMove: DistanceCheck Failed. Waypoint [%s/%s]: %s shifted to %sm. New Distance to Primary: %s (%s). Primary Max Range: %s.'.
                [this.assignedcontrolled.debugname, $i, $waypoints.count, $pathWaypoint, $positionToMovePreliminary,
                $primaryTarget.bboxdistanceto.{[$targetSector, $positionToMovePreliminary]},
                $primaryTarget.distanceto.{[$targetSector, $positionToMovePreliminary]}, $maxEffectiveTargetCombatRange]"
              chance="$debugChance" />
            <remove_value name="$waypointDistanceRatio" />
          </do_if>
          <remove_value name="$waypointDistance" />
          <set_value name="$positionToMoveMaxChecks" exact="10" />
          <set_value name="$positionToMoveToCheck" exact="$positionToMovePreliminary" />
          <set_value name="$positionSignalToCheck" exact="true" />
          <set_value name="$positionToSideStep" exact="$pathWaypoint" />
          <set_value name="$sideStepTarget" exact="$primaryTarget" />
          <set_value name="$ourRadius" exact="this.assignedcontrolled.size" />
          <do_all exact="$positionToMoveMaxChecks" counter="$j">
            <do_if value="$positionSignalToCheck">
              <set_value
                name="this.assignedcontrolled.pilot.$StationAttackListeningForAnswer" exact="'StationAttackIsPosBlocked'" />
              <signal_objects
                object="$primaryTarget" param="'StationAttackIsPosBlocked'"
                param2="[$positionToMoveToCheck, this.assignedcontrolled.size]" param3="this.assignedcontrolled" />
              <debug_text
                text="'AttackStationInSector [%s]: SafePathMove: PositionIsBlocked: Check if Position To Move: %s is Blocked.'.
                  [this.assignedcontrolled.debugname, $positionToMoveToCheck]"
                chance="$debugChance" />
              <remove_value name="$positionToMoveIsBlockedBy" />
              <wait exact="1s">
                <interrupt>
                  <conditions>
                    <event_object_signalled object="this.assignedcontrolled" param="'StationAttackPosIsBlocked'" />
                    <check_value
                      value="@event.param2.{1} != null and @event.param2.{2} != null and @event.param3 != null" />
                  </conditions>
                  <actions>
                    <set_value name="$positionToMoveIsBlockedBy"
                      exact="[event.param3, event.param2.{1}, event.param2.{2}]" />
                    <remove_value name="this.assignedcontrolled.pilot.$StationAttackListeningForAnswer" />
                  </actions>
                </interrupt>
              </wait>
              <remove_value name="this.assignedcontrolled.pilot.$StationAttackListeningForAnswer" />
            </do_if>
            <!-- When position is blocked by another ship -->
            <do_if
              value="$positionToMoveIsBlockedBy? and $positionToMoveIsBlockedBy.{1} != this.assignedcontrolled or @$positionSignalToCheck == false">
              <debug_text
                text="'AttackStationInSector [%s]: SafePathMove: PositionIsBlocked: Position To Move: %s. To Check: %s is Blocked by %s. At Position: %s. Size: %s. Finding alternative position.'.
                  [this.assignedcontrolled.debugname, $positionToMovePreliminary, @$positionToMoveToCheck,
                  @$positionToMoveIsBlockedBy.{1}.debugname, @$positionToMoveIsBlockedBy.{2}, @$positionToMoveIsBlockedBy.{3}]"
                chance="$debugChance" />

              <do_if value="@$positionSignalToCheck">
                <set_value name="$blockedPosition" exact="$positionToMoveIsBlockedBy.{2}" />
                <do_if value="@$lastBlockedBy == $positionToMoveIsBlockedBy.{1} and @$sideStepDistance != null">
                  <set_value name="$sideStepDistance" exact="$sideStepDistance * 1.1" />
                </do_if>
                <do_else>
                  <set_value name="$blockingRadius" exact="$positionToMoveIsBlockedBy.{3}" />
                  <set_value name="$sideStepDistance" exact="($blockingRadius + $ourRadius) * 2.5" />
                  <set_value name="$lastBlockedBy" exact="$positionToMoveIsBlockedBy.{1}" />
                </do_else>
              </do_if>
              <include_interrupt_actions ref="CreateSideStepPosition" />
              <create_position name="$positionBlockedRelative" object="$targetSector"
                x="$blockedPosition.x"
                y="$blockedPosition.y"
                z="$blockedPosition.z"
                space="$primaryTarget" />
              <create_position name="$positionSideStepInSector" object="$primaryTarget"
                x="$positionSideStep.x"
                y="$positionSideStep.y"
                z="$positionSideStep.z"
                space="$targetSector" />
              <debug_text
                text="'AttackStationInSector [%s]: SideStepPosition: BlockedRelative Position: %s. New Position in Sector: %s.'.
                  [this.assignedcontrolled.debugname, $positionBlockedRelative, $positionSideStepInSector]"
                chance="$debugChance" />
              <create_position name="$currentPositionRelativeToObject"
                x="$positionInSector.x - $blockedPosition.x"
                y="$positionInSector.y - $blockedPosition.y"
                z="$positionInSector.z - $blockedPosition.z"
              />
              <create_position name="$nextPositionRelativeToObject"
                x="$positionSideStepInSector.x - $blockedPosition.x"
                y="$positionSideStepInSector.y - $blockedPosition.y"
                z="$positionSideStepInSector.z - $blockedPosition.z"
              />
              <set_value name="$safeRadiusAroundObject" exact="$blockingRadius" />
              <include_interrupt_actions ref="CheckIfPathCrossedUnsafeRadius" />
              <do_if value="$pathCrossesUnSafeRadius">
                <debug_text
                  text="'AttackStationInSector [%s]: SafePathMove: Path to alternative position crosses obstacle, going to next turn.'.[this.assignedcontrolled.debugname]"
                  chance="$debugChance" />
                <set_value name="$positionSignalToCheck" exact="false" />
                <set_value name="$sideStepDistance" exact="$sideStepDistance * 1.1" />
              </do_if>
              <do_else>
                <set_value name="$positionToMoveToCheck" exact="$positionSideStepInSector" />
                <set_value name="$positionSignalToCheck" exact="true" />
              </do_else>
              <remove_value name="$positionSideStepInSector" />
              <remove_value name="$positionSideStep" />
              <remove_value name="$positionToMoveIsBlockedBy" />
            </do_if>
            <do_else>
              <remove_value name="$positionToMoveIsBlockedBy" />
              <set_value name="$positionToMovePreliminary" exact="$positionToMoveToCheck" />
              <break />
            </do_else>
            <wait exact="10ms" />
          </do_all>
        </do_if>
        <set_value name="$positionToMove" exact="$positionToMovePreliminary" />
        <create_position name="$pathWaypoint" object="$targetSector"
          x="$positionToMove.x"
          y="$positionToMove.y"
          z="$positionToMove.z"
          space="$primaryTarget" />
        <do_if value="$isAttackingPosition">
          <set_value name="$positionForAttack" exact="$positionToMove" />
        </do_if>
        <set_value name="$positionIsSafe" exact="true" />
        <do_if value="(@$isFleeing or @$isGoOutRadius) and ($i == 1)" negate="true">
          <set_value name="$nearStationsToExclude" exact="if @$isAttackingPosition then [$primaryTarget] else []" />
          <find_object name="$nearStations" class="[class.station]" space="$targetSector"
            recursive="true" multiple="true" ishostileto="this.trueowner" known="true"
            sortbydistanceto="this.assignedcontrolled" sortdescending="false" excluded="$nearStationsToExclude"
          />
          <set_value name="$checkStationsOnDistance" exact="this.distanceto.{[$targetSector, $positionToMove]} * 3" />
          <debug_text
            text="'AttackStationInSector [%s]: SafePathMove: To check is path to waypoint is safe going to check stations on distance: %s. In total: %s.'.
              [this.assignedcontrolled.debugname, $checkStationsOnDistance, $nearStations.count]"
            chance="$debugChance" />
          <do_for_each name="$nearStation" in="$nearStations">
            <do_if value="this.assignedcontrolled.distanceto.{$nearStation} gt $checkStationsOnDistance">
              <break />
            </do_if>
            <set_value name="$currentPositionRelativeToObject" exact="this.assignedcontrolled.relativeposition.{$nearStation}" />
            <create_position name="$nextPositionRelativeToObject" object="$targetSector"
              x="$positionToMove.x"
              y="$positionToMove.y"
              z="$positionToMove.z"
              space="$nearStation" />
            <set_value name="$safeRadiusAroundObject"
              exact="($nearStation.maxcombatrange.all + ($nearStation.size / 2) + $thisRadius) * 1.1" />
            <remove_value name="$pathCrossesUnSafeRadius" />
            <debug_text
              text="'AttackStationInSector [%s]: SafePathMove: Checking if path to waypoint crosses unsafe radius %s around station: %s.'.
                [this.assignedcontrolled.debugname, $safeRadiusAroundObject, $nearStation.debugname]"
              chance="$debugChance" />
            <include_interrupt_actions ref="CheckIfPathCrossedUnsafeRadius" />
            <do_if value="$pathCrossesUnSafeRadius">
              <debug_text
                text="'AttackStationInSector [%s]: SafePathMove: Path to waypoint %s is not safe: %s. It crosses UnSafe radius around station: %s'.
                  [this.assignedcontrolled.debugname, $pathWaypoint, $pathCrossesUnSafeRadius, $nearStation.debugname]"
                chance="$debugChance" />
              <wait exact="1s" />
              <set_value name="$positionIsSafe" exact="false" />
              <remove_value name="$pathCrossesUnSafeRadius" />
              <break />
            </do_if>
            <remove_value name="$pathCrossesUnSafeRadius" />
            <wait exact="10ms" />
          </do_for_each>
        </do_if>
        <do_if value="not $positionIsSafe">
          <debug_text
            text="'AttackStationInSector [%s]: SafePathMove: Path waypoint %s is not safe (%s).'.[this.assignedcontrolled.debugname, $pathWaypoint, $positionIsSafe]"
            chance="$debugChance" />
          <wait exact="200ms" />
          <remove_value name="$positionToCheck" />
          <do_if value="($i == 1 or $isAttackingPosition) and not (@$isFleeing == true or @$isGoOutRadius == true)">
            <wait exact="20ms" />
            <!-- <set_value name="$subTargetToExclude" exact="$target" /> -->
            <remove_value name="$positionIsSafe" />
            <remove_value name="$positionToMove" />
            <remove_value name="$positionForAttack" />
            <set_value name="$isGoOutRadius" exact="true" />
            <include_interrupt_actions ref="PrepareFleeing" />
            <include_interrupt_actions ref="PrepareFleeingPath" />
            <set_value name="$isFleeing" exact="false" />
            <debug_text
              text="'AttackStationInSector [%s]: SafePathMove: First or Attacking %s waypoint %s is not safe. Fleeing out: %s. Go Out: %s'.
                [this.assignedcontrolled.debugname, $isAttackingPosition, $pathWaypoint, $waypoints, $isGoOutRadius]"
              chance="$debugChance" />
            <resume label="SafePathMove" />
          </do_if>
          <do_else>
            <debug_text
              text="'AttackStationInSector [%s]: SafePathMove: Next waypoint %s is not safe. Assign current as Final position: %s.'.
                [this.assignedcontrolled.debugname, $pathWaypoint, @$interimPosition]"
              chance="$debugChance" />
          </do_else>
        </do_if>
        <remove_value name="$positionToCheck" />
        <do_if value="$positionIsSafe">
          <debug_text
            text="'AttackStationInSector [%s]: SafePathMove: Moving to path waypoint [%s/%s]: %s. Distance: %s. Is Attacking: %s. Is Fleeing: %s. Is Go Out: %s. Position to move: %s. Current: %s (%s). Target Position: %s.' .
              [this.assignedcontrolled.debugname, $i, $waypoints.count, $pathWaypoint,
              this.assignedcontrolled.distanceto.{[$targetSector, $positionToMove]}, $isAttackingPosition, @$isFleeing, @$isGoOutRadius,
              $positionToMove, this.assignedcontrolled.relativeposition.{$targetSector}, $positionRelativeToPrimaryTarget,
              $positionPrimaryTargetInSector, ]"
            chance="$debugChance"
          />
          <do_if value="$isAttackingPosition">
            <set_value name="$safetyIndicator" exact="1" />
          </do_if>
          <do_if value="@$isFleeing == true and $i == $waypoints.count and this.assignedcontrolled.isclass.ship_l">
            <set_drone_armed object="this.assignedcontrolled" category="unitcategory.defence" armed="true" />
          </do_if>
          <do_if value="$i == 1">
            <create_orientation name="$rotationOnTarget" orientation="look_at" refposition="$positionToMove">
              <position object="this.assignedcontrolled" space="$targetSector" />
            </create_orientation>
            <debug_text
              text="'AttackStationInSector [%s]: SafePathMove: First waypoint %s/%s. rotating to: %s with rotation: %s.'.
                [this.assignedcontrolled.debugname, $i, $waypoints.count, $positionToMove, $rotationOnTarget]"
              chance="$debugChance" />
            <move_to destination="$targetSector" object="this.assignedcontrolled" finishonapproach="false"
              forceposition="false" forcerotation="true" boost="false" travel="false">
              <position object="this.assignedcontrolled" />
              <rotation value="$rotationOnTarget" />
              <interrupt_after_time
                time="if @$isFleeing == true then 1s else if this.assignedcontrolled.isclass.ship_xl then 10s else 5s" />
            </move_to>
            <remove_value name="$rotationOnTarget" />
          </do_if>
          <set_value name="$distanceToMove" exact="this.assignedcontrolled.distanceto.{[$targetSector, $positionToMove]}" />
          <do_all exact="50">
            <set_value name="$distanceToMove" exact="this.assignedcontrolled.distanceto.{[$targetSector, $positionToMove]}" />
            <do_if value="$distanceToMove le this.assignedcontrolled.size / 10">
              <break />
            </do_if>
            <set_value name="$moveUsingTravelMode"
              exact="this.assignedcontrolled.travel.available and (player.age - @$isUnderAttack) gt 3s and $distanceToMove ge 10km" />
            <do_if value="$moveUsingTravelMode">
              <debug_text
                text="'AttackStationInSector [%s]: SafePathMove: Moving via Travel: Distance: %s. MaxSpeed: %s.'.
                [this.assignedcontrolled.debugname, $distanceToMove, this.assignedcontrolled.travel.maxspeed]"
                chance="$debugChance" />
              <include_interrupt_actions ref="RefreshTargetsRelatedData" />
              <set_value name="$travelModeCheckId" exact="player.age" />
              <signal_objects object="this.assignedcontrolled" param="'TravelModeCheckDistance'"
                param2="$travelModeCheckId"
                param3="1"
                delay="this.assignedcontrolled.travel.chargetime * 10" />
              <signal_objects object="this.assignedcontrolled" param="'TravelModeCheckDistance'"
                param2="$travelModeCheckId"
                param3="2"
                delay="this.assignedcontrolled.travel.chargetime * 20" />
              <move_to destination="$targetSector" object="this.assignedcontrolled" boost="true"
                travel="true" forceposition="true">
                <position value="$positionToMove" />
                <interrupt>
                  <conditions>
                    <event_object_signalled object="this.assignedcontrolled" param="'TravelModeCheckDistance'" />
                    <check_value value="@event.param2 == @$travelModeCheckId" />
                    <debug_text
                      text="'AttackStationInSector [%s]: SafePathMove: TravelModeCheckDistance[%s]: Distance from starting point %s after %s. Traveling: %s. Charging: %s. Coasting: %s.'.
                        [this.assignedcontrolled.debugname, @event.param3, this.assignedcontrolled.distanceto.{[$targetSector, $positionInSector]},
                        this.assignedcontrolled.travel.chargetime * 10 * @event.param3,
                        this.assignedcontrolled.travel.active, this.assignedcontrolled.travel.charging, this.assignedcontrolled.travel.iscoasting]"
                    />
                    <check_any>
                      <check_all>
                        <check_value value="@event.param3 == 1" />
                        <check_value value="this.assignedcontrolled.travel.active" negate="true" />
                        <check_value value="this.assignedcontrolled.travel.charging" negate="true" />
                      </check_all>
                      <check_all>
                        <check_value value="@event.param3 == 2" />
                        <check_value value="this.assignedcontrolled.travel.active" negate="true" />
                      </check_all>
                    </check_any>
                  </conditions>
                </interrupt>
              </move_to>
              <remove_value name="$travelModeCheckId" />
            </do_if>
            <do_else>
              <do_if value="this.assignedcontrolled.boost.available">
                <set_value name="$movingTime" exact="(($distanceToMove)f / (this.assignedcontrolled.boost.maxspeed)f)s" />
                <do_if value="($movingTime)s gt this.assignedcontrolled.boost.remainingduration">
                  <set_value name="$movingTime" exact="this.assignedcontrolled.boost.remainingduration" />
                </do_if>
                <set_value name="$movingTime" exact="$movingTime * 2s + $updateTime" />
                <debug_text
                  text="'AttackStationInSector [%s]: SafePathMove: Moving via Boost: Distance: %s. Time: %s (%s). MaxSpeed: %s.'.
                    [this.assignedcontrolled.debugname, $distanceToMove, $movingTime, this.assignedcontrolled.boost.remainingduration,
                    this.assignedcontrolled.boost.maxspeed]"
                  chance="$debugChance" />
              </do_if>
              <do_else>
                <debug_text
                  text="'AttackStationInSector [%s]: SafePathMove: Moving simple: Distance: %s. MaxSpeed: %s.'.
                    [this.assignedcontrolled.debugname, $distanceToMove, this.assignedcontrolled.maxspeed]"
                  chance="$debugChance" />
                <set_value name="$movingTime" exact="$updateTime" />
              </do_else>
              <move_to destination="$targetSector" object="this.assignedcontrolled" boost="true"
                travel="$moveUsingTravelMode"
                forceposition="true">
                <position value="$positionToMove" />
                <interrupt_after_time time="$movingTime" />
              </move_to>
            </do_else>
            <debug_text
              text="'AttackStationInSector [%s]: SafePathMove: Moving step finished.'.
                [this.assignedcontrolled.debugname]"
              chance="$debugChance" />
            <do_if value="@$isFleeing == true" negate="true">
              <include_interrupt_actions ref="AvoidDronesAttack" />
              <do_if value="@$isFleeing == true">
                <resume label="SafePathMove" />
              </do_if>
            </do_if>
            <wait exact="5ms" />
          </do_all>
          <do_if value="$distanceToMove gt $thisRadius">
            <debug_text
              text="'AttackStationInSector [%s]: SafePathMove: Failed move to waypoint [%s/%s]: %s. Distance: %s.'.
                [this.assignedcontrolled.debugname, $i, $waypoints.count, $pathWaypoint, $distanceToMove]"
              chance="$debugChance" />
            <resume label="acquireTarget" />
          </do_if>
          <do_if
            value="($isAttackingPosition or $i == $waypoints.count) and not (@$isFleeing == true or @$isGoOutRadius == true)">
            <set_value name="$rotationGetOn" exact="$primaryTarget" />
            <include_interrupt_actions ref="IsNotAcceptableRotation" />
            <do_if value="$rotationsIsNotAcceptable">
              <move_to destination="$targetSector" object="this.assignedcontrolled" finishonapproach="false"
                forceposition="false" forcerotation="true" boost="false" travel="false">
                <position object="this.assignedcontrolled" />
                <rotation value="$rotationOnTarget" />
                <interrupt_after_time time="if this.assignedcontrolled.isclass.ship_xl then 10s else 5s" />
              </move_to>
            </do_if>
            <remove_value name="$rotationsIsNotAcceptable" />
            <remove_value name="$rotationOnTarget" />
          </do_if>
          <do_if value="$isAttackingPosition">
            <set_value name="$positionForAttackInitial" exact="$pathWaypoint" />
          </do_if>
          <wait exact="10ms" />
        </do_if>
        <include_interrupt_actions ref="RefreshTargetsRelatedData" />
        <debug_text
          text="'AttackStationInSector [%s]: SafePathMove: Waypoint [%s/%s] processed (or skipped, if not safe). Is it Attacking: %s. Is it Safe: %s. Is Fleeing: %s (%s).'.
            [this.assignedcontrolled.debugname, $i, $waypoints.count, $isAttackingPosition, $positionIsSafe, @$isFleeing, @$isFleeing == true]"
          chance="$debugChance" />
        <do_if
          value="($i == $waypoints.count and not $isAttackingPosition or not $positionIsSafe) and not (@$isFleeing == true or @$isGoOutRadius == true)">
          <debug_text
            text="'AttackStationInSector [%s]: SafePathMove: All initial waypoints processed - %s. Trying to add attacking position.'.
              [this.assignedcontrolled.debugname, $waypoints.count]"
            chance="$debugChance" />
          <set_value name="$isAttackingPosition" exact="true" />
          <wait exact="10ms" />
          <do_if value="@$attackTimeStamp le 0s">
            <set_value name="$attackTimeStamp" exact="player.age" />
          </do_if>
          <debug_text
            text="'AttackStationInSector [%s]: SafePathMove: Reached interim position: %s.'.
              [this.assignedcontrolled.debugname, this.assignedcontrolled.relativeposition.{$targetSector}]"
            chance="$debugChance" />
          <remove_value name="$components" />
          <find_object_component
            name="$components"
            object="$primaryTarget" checkoperational="false" integrated="false"
            indestructible="false" invulnerable="false" sortbydistanceto="this.assignedcontrolled"
            excluded="$excludedComponents"
            append="true" multiple="true" recursive="true" sortdescending="false">
            <match module="true" />
            <match state="componentstate.wreck" negate="true" />
          </find_object_component>
          <debug_text
            text="'AttackStationInSector [%s]: SafePathMove: Recheck - All. Target %s has %s components. Distance to: %s, Size/2: %s.'.
              [this.assignedcontrolled.debugname, $primaryTarget.debugname, $components.count,
              $primaryTarget.distanceto.{this.assignedcontrolled}, $primaryTargetRadius]"
            chance="$debugChance" />
          <debug_text
            text="'AttackStationInSector [%s]: SafePathMove: Target %s has %s components. First: %s. Distance to: %s. Current: %s. Radius: %s. Relative Pos: %s.'.
              [this.assignedcontrolled.debugname, $primaryTarget.debugname, $components.count, @$components.{1}.debugname,
              @this.assignedcontrolled.bboxdistanceto.{@$components.{1}}, this.assignedcontrolled.bboxdistanceto.{$target},
              @$components.{1}.size/2m,
              @this.assignedcontrolled.relativeposition.{@$components.{1}}]"
            chance="$debugChance" />
          <do_if value="$components.count == 0">
            <resume label="finish" />
          </do_if>
          <do_if
            value="($target != @$components.{1}) and ((this.assignedcontrolled.bboxdistanceto.{$components.{1}} lt this.assignedcontrolled.bboxdistanceto.{$target}) or ($components.indexof.{$target} ge 0))">
            <set_value name="$target" exact="@$components.{1}" />
            <debug_text
              text="'AttackStationInSector [%s]: New SubTarget %s'.
                [this.assignedcontrolled.debugname, $target.debugname]"
              chance="$debugChance" />
          </do_if>
          <remove_value name="$components" />
          <include_interrupt_actions ref="RefreshTargetsRelatedData" />
          <debug_text
            text="'AttackStationInSector [%s]: SafePathMove: Distance (2) to Primary Target: %s. Safe distance: %s. To Target: %s.'.
              [this.assignedcontrolled.debugname, $currentDistanceToPrimary,
              $safeDistanceToPrimary, this.assignedcontrolled.distanceto.{$target}]"
            chance="$debugChance" />
          <debug_text
            text="'AttackStationInSector [%s]: SafePathMove: SubTarget %s has an effective combat range of %sm, our: %s.'.
              [this.assignedcontrolled.debugname, $target.debugname, $targetEffectiveRange, $maxEffectiveCombatRange]"
            chance="$debugChance" />
          <do_if value="$targetEffectiveRange * 1.2 lt $maxEffectiveCombatRange * 0.95">
            <set_value name="$getRandomStart" exact="$targetEffectiveRange * 1.2" />
            <set_value name="$getRandomEnd" exact="$maxEffectiveCombatRange * 0.95" />
            <include_interrupt_actions ref="GetRandom" />
            <set_value name="$desiredDistance" exact="$getRandomResult" />
            <remove_value name="$getRandomResult" />
          </do_if>
          <do_else>
            <set_value name="$desiredDistance" exact="$maxEffectiveCombatRange * 0.98" />
          </do_else>
          <set_value name="$currentRatio" exact="$desiredDistance / this.assignedcontrolled.distanceto.{$target}" />
          <debug_text
            text="'AttackStationInSector [%s]: SafePathMove: Test Positions: Positions: Ship: %s. Primary: %s. Target: %s, To Primary: Ship: %s, Target: %s. To Target: Ship: %s. Primary: %s. Distance: Ship: To Primary: %s. To Target: %s. Target to Primary: %s (%s).'.
              [this.assignedcontrolled.debugname,
              this.assignedcontrolled.relativeposition.{$targetSector}, $primaryTarget.relativeposition.{$targetSector}, $target.relativeposition.{$targetSector},
              this.assignedcontrolled.relativeposition.{$primaryTarget}, $target.relativeposition.{$primaryTarget},
              this.assignedcontrolled.relativeposition.{$target}, $primaryTarget.relativeposition.{$target},
              this.assignedcontrolled.distanceto.{$primaryTarget}, this.assignedcontrolled.distanceto.{$target},
              $target.distanceto.{$primaryTarget}, $primaryTarget.distanceto.{$target}]"
            chance="$debugChance" />
          <debug_text
            text="'AttackStationInSector [%s]: SafePathMove: Distance to SubTarget: Current: %s. Desired: %s. Current ratio: %s. Position Relative: To Primary: %s. To Target: %s. Target to Primary: %s.'.
              [this.assignedcontrolled.debugname, this.assignedcontrolled.distanceto.{$target}, $desiredDistance, $currentRatio,
              $positionRelativeToPrimaryTarget, $positionRelativeToTarget, $positionTargetRelativeToPrimaryTarget]"
            chance="$debugChance" />
          <create_position name="$waypointForAttack"
            x="$positionRelativeToTarget.x * $currentRatio"
            y="$positionRelativeToTarget.y * $currentRatio"
            z="$positionRelativeToTarget.z * $currentRatio" />
          <debug_text
            text="'AttackStationInSector [%s]: SafePathMove: Attack Waypoint: %s. Target to Primary: %s. Current relative position: %s (%s)'.
              [this.assignedcontrolled.debugname, $waypointForAttack,
              $positionTargetRelativeToPrimaryTarget, $positionRelativeToTarget,
              this.assignedcontrolled.relativeposition.{$target}]"
            chance="$debugChance" />
          <do_if value="$i == $waypoints.count">
            <append_to_list name="$waypoints" exact="$waypointForAttack" />
          </do_if>
          <do_else>
            <set_value name="$waypoints.{$i + 1}" exact="$waypointForAttack" />
          </do_else>
        </do_if>
        <do_elseif value="$isAttackingPosition">
          <break />
        </do_elseif>
        <do_if value="@$isFleeing == true" negate="true">
          <include_interrupt_actions ref="AvoidDronesAttack" />
          <do_if value="@$isFleeing == true">
            <resume label="SafePathMove" />
          </do_if>
        </do_if>
      </do_for_each>
      <do_if value="@$isFleeing == true and not (@$isGoOutRadius == true)">
        <remove_value name="$isGoOutRadius" />
        <resume label="fleeOut" />
      </do_if>
      <do_elseif value="@$isGoOutRadius == true">
        <remove_value name="$isGoOutRadius" />
        <resume label="acquireTarget" />
      </do_elseif>
      <include_interrupt_actions ref="AvoidDronesAttack" />
      <do_if value="@$isFleeing == true">
        <resume label="SafePathMove" />
      </do_if>
      <set_command command="command.attackobject" param="$primaryTarget" />
      <set_command_action commandaction="commandaction.calculating" />
      <remove_value name="$waypoints" />
      <remove_value name="$isAttackingPosition" />
      <remove_value name="$positionRelativeToPrimaryTarget" />
      <remove_value name="$interimPositionRelativeToPrimaryTarget" />
      <remove_value name="$positionTargetRelativeToPrimaryTarget" />
      <remove_value name="$targetToPrimaryDistance" />
      <remove_value name="$targetToPrimaryRelativeRatio" />
      <remove_value name="$interimPosition" />
      <remove_value name="$pathCrossesUnSafeRadius" />
      <remove_value name="$strafePositionRelative" />
      <set_value name="$strafeOnAttack" exact="false" />
      <label name="standAndAttack" />
      <include_interrupt_actions ref="RefreshTargetsRelatedData" />
      <set_value name="$positionForAttack" exact="$positionInSector" />
      <debug_text
        text="'AttackStationInSector [%s]: Reached position for attack: %s.'.[this.assignedcontrolled.debugname, @$positionForAttack]"
        chance="$debugChance" />
      <do_if value="@this.assignedcontrolled.defencenpc">
        <signal_objects object="this.assignedcontrolled.defencenpc" param="'attack'" />
        <wait exact="0.5s" />
      </do_if>
      <set_value name="$distanceToPrimaryTargetRaw" exact="$primaryTarget.distanceto.{this.assignedcontrolled}" />
      <find_ship name="$ourShips" trueowner="this.trueowner" space="$primaryTarget.zone" excluded="[this.assignedcontrolled]"
        sortbyvalue="(loop.element.distanceto.{$primaryTarget} + loop.element.distanceto.{this.assignedcontrolled}) - $distanceToPrimaryTargetRaw"
        sortdescending="false" multiple="true" recursive="true" class="[class.ship_l, class.ship_xl]" />
      <debug_text
        text="'AttackStationInSector [%s]: BlockingShips: Finding ships between us and Primary Target: %s. Count: %s. First: %s. Value to Check: %s. Distance to Primary: %s.'.
          [this.assignedcontrolled.debugname, $primaryTarget.debugname, @$ourShips.count, @$ourShips.{1}.debugname,
          (@$ourShips.{1}.distanceto.{$primaryTarget} + @$ourShips.{1}.distanceto.{this.assignedcontrolled}) - $distanceToPrimaryTargetRaw, this.assignedcontrolled.bboxdistanceto.{$primaryTarget}]"
        chance="$debugChance" />
      <do_for_each name="$ourShip" in="$ourShips" counter="$i">
        <do_if
          value="($ourShip.distanceto.{$primaryTarget} + $ourShip.distanceto.{this.assignedcontrolled}) le $distanceToPrimaryTargetRaw * 1.5">
          <debug_text
            text="'AttackStationInSector [%s]: BlockingShips: Ship %s is possible between us and Primary Target: %s. Distance to us: %s.'.
              [this.assignedcontrolled.debugname, $ourShip.debugname, $primaryTarget.debugname, $ourShip.distanceto.{this.assignedcontrolled}]"
            chance="$debugChance" />
          <set_value name="$currentPositionRelativeToObject" exact="this.assignedcontrolled.relativeposition.{$ourShip}" />
          <set_value name="$nextPositionRelativeToObject" exact="$target.relativeposition.{$ourShip}" />
          <set_value name="$safeRadiusAroundObject" exact="$ourShip.size" />
          <include_interrupt_actions ref="CheckIfPathCrossedUnsafeRadius" />
          <do_if value="$pathCrossesUnSafeRadius">
            <debug_text
              text="'AttackStationInSector [%s]: BlockingShips: LOS to Target %s is blocked by ship: %s. Calculating side-step position.'.
                [this.assignedcontrolled.debugname, $target.debugname, $ourShip.debugname]"
              chance="$debugChance" />

            <set_value name="$blockedPosition" exact="$ourShip.relativeposition.{$targetSector}" />
            <set_value name="$positionToSideStep" exact="$positionRelativeToTarget" />
            <set_value name="$sideStepDistance" exact="this.assignedcontrolled.size * 4" />
            <set_value name="$sideStepTarget" exact="$target" />
            <include_interrupt_actions ref="CreateSideStepPosition" />

            <remove_value name="$positionForAttack" />
            <create_list name="$waypoints" />
            <append_to_list name="$waypoints" exact="$positionSideStep" />
            <set_value name="$isAttackingPosition" exact="true" />
            <remove_value name="$positionSideStep" />
            <remove_value name="$sideStepTarget" />
            <remove_value name="$sideStepDistance" />
            <remove_value name="$positionToSideStep" />
            <remove_value name="$blockedPosition" />
            <remove_value name="$pathCrossesUnSafeRadius" />
            <do_if value="$safetyIndicator gt 0">
              <resume label="SafePathMove" />
            </do_if>
            <do_else>
              <set_value name="$excludedComponents" exact="[$target]" />
              <resume label="acquireTarget" />
            </do_else>
            <break />
          </do_if>
          <remove_value name="$pathCrossesUnSafeRadius" />
        </do_if>
        <do_else>
          <break />
        </do_else>
        <wait exact="10ms" />
        <include_interrupt_actions ref="AvoidDronesAttack" />
        <do_if value="@$isFleeing == true">
          <resume label="SafePathMove" />
        </do_if>
      </do_for_each>
      <remove_value name="$previousPositionForAttackRelative" />
      <set_value name="$targetIsReallyAttacked" exact="0" />
      <set_value name="$targetIsReallyAttackedByPrimaryWeapon" exact="0" />
      <create_list name="$countOfAttacks" />
      <do_while value="not @$target.iswreck">
        <remove_value name="$components" />
        <find_object_component name="$components"
          object="$primaryTarget" checkoperational="false" integrated="false"
          indestructible="false" invulnerable="false" sortbydistanceto="this.assignedcontrolled"
          excluded="$excludedComponents"
          append="true" multiple="true" recursive="true" sortdescending="false">
          <match module="true" />
          <match state="componentstate.wreck" negate="true" />
          <!--
                    <match_is_in_view_of object="this.assignedcontrolled" horizontal="360deg" vertical="360deg" /> -->
        </find_object_component>
        <do_if value="$components.count == 0">
          <remove_value name="$positionForAttack" />
          <remove_value name="$positionToMove" />
          <resume label="finish" />
        </do_if>
        <include_interrupt_actions ref="AssignSubordinatesToAttackStation" />
        <debug_text
          text="'AttackStationInSector [%s]: Target %s has %s components. First: %s. Distance to: %s. Current: %s. Compare: Less: %s. Delta: %s. Radius: %s. Relative Pos: %s.'.
            [this.assignedcontrolled.debugname, $primaryTarget.debugname, $components.count, $components.{1}.debugname,
            this.assignedcontrolled.bboxdistanceto.{$components.{1}}, this.assignedcontrolled.bboxdistanceto.{$target},
            this.assignedcontrolled.bboxdistanceto.{$components.{1}} lt this.assignedcontrolled.bboxdistanceto.{$target},
            this.assignedcontrolled.bboxdistanceto.{$components.{1}} - this.assignedcontrolled.bboxdistanceto.{$target},
            $components.{1}.size/2m,
            this.assignedcontrolled.relativeposition.{$components.{1}}]"
          chance="$debugChance" />
        <do_if
          value="($target != @$components.{1}) and ((this.assignedcontrolled.bboxdistanceto.{$components.{1}} lt this.assignedcontrolled.bboxdistanceto.{$target}) or ($components.indexof.{$target} ge 0))">
          <set_value name="$target" exact="@$components.{1}" />
          <create_list name="$countOfAttacks" />
          <debug_text
            text="'AttackStationInSector [%s]: New SubTarget %s'.
              [this.assignedcontrolled.debugname, $target.debugname]"
            chance="$debugChance" />
        </do_if>
        <remove_value name="$components" />
        <include_interrupt_actions ref="RefreshTargetsRelatedData" />
        <do_if value="@this.assignedcontrolled.defencenpc">
          <signal_objects object="this.assignedcontrolled.defencenpc" param="'attack'" param2="$primaryTarget"
            param3="[null, false, false, [], -1, [], $target, false]" />
          <debug_text
            text="'AttackStationInSector [%s]: Signal for attack to: %s is sent'.
              [this.assignedcontrolled.debugname, @this.assignedcontrolled.defencenpc.name]"
            chance="$debugChance" />
        </do_if>
        <get_attackstrength object="this.assignedcontrolled" target="@$primaryTarget" allowanyturret="false"
          usedrones="false" useforwardweapons="true">
          <result total="$possibleAttackStrength" />
        </get_attackstrength>
        <debug_text
          text="'AttackStationInSector [%s]:  Attack possible strength: %s. Dps Primary: %s'.
            [this.assignedcontrolled.debugname, $possibleAttackStrength, this.assignedcontrolled.dps.primary]"
          chance="$debugChance" />
        <debug_text
          text="'AttackStationInSector [%s]: (1) Distance to: Target: %s. Primary Target: %s. Rotation: %s. Safety Indicator: %s.'.
            [this.assignedcontrolled.debugname, $currentDistanceToTarget,
            $currentDistanceToPrimary, @this.assignedcontrolled.rotation, $safetyIndicator]"
          chance="$debugChance" />
        <do_if value="$safetyIndicator gt 0">
          <set_command command="command.attackobject" param="$primaryTarget" />
          <set_command_action commandaction="commandaction.calculating" />
          <debug_text
            text="'AttackStationInSector [%s]: Preparing to move to Target. Conditions are met: Safety Indicator: %s.'.
              [this.assignedcontrolled.debugname, $safetyIndicator]"
            chance="$debugChance" />
          <do_if value="@$strafeOnAttack and $strafePositionRelative?">
            <create_position name="$positionForAttack"
              object="$target"
              x="$strafePositionRelative.x"
              y="$strafePositionRelative.y"
              z="$strafePositionRelative.z"
              space="$targetSector" />
            <debug_text
              text="'AttackStationInSector [%s]: Strafe for attack: %s. To Position: %s (%s).'.
                [this.assignedcontrolled.debugname, $strafeOnAttack, $strafePositionRelative, $positionForAttack]"
              chance="$debugChance" />
            <remove_value name="$positionToMove" />
            <remove_value name="$strafePositionRelative" />
            <remove_value name="$previousPositionForAttackRelative" />
          </do_if>
          <do_else>
            <set_value name="$positionDelta" exact="[$currentDistanceToTarget * 0.05, $thisRadius].max" />
            <set_value name="$positionRatio" exact="1 - $positionDelta / $currentDistanceToTarget" />
            <set_value name="$previousPositionForAttackRelative" exact="$positionRelativeToTarget" />
            <create_position name="$positionForAttack"
              object="$target"
              x="$positionRelativeToTarget.x * $positionRatio"
              y="$positionRelativeToTarget.y * $positionRatio"
              z="$positionRelativeToTarget.z * $positionRatio" space="$targetSector" />
            <debug_text
              text="'AttackStationInSector [%s]: Move for attack: %s. Relative to target: %s (%s), Ratio: %s. Delta: %s'.
                [this.assignedcontrolled.debugname, $positionForAttack, $positionRelativeToTarget,
                this.assignedcontrolled.relativeposition.{$target},
                $positionRatio, $positionDelta]"
              chance="$debugChance"
            />
            <remove_value name="$positionDelta" />
            <remove_value name="$positionRatio" />
            <remove_value name="$positionToMove" />
          </do_else>
          <find_object_component name="$weaponComponents" object="$primaryTarget" class="[class.weapon]"
            surfaceelement="true" integrated="false" indestructible="false" invulnerable="false"
            sortbyvalue="loop.element.maxfirerange * 1.05 - loop.element.bboxdistanceto.[$targetSector, $positionForAttack]"
            append="true" multiple="true" recursive="true" sortdescending="true">
            <match state="componentstate.wreck" negate="true" />
            <match_parent>
              <match state="componentstate.wreck" negate="true" />
            </match_parent>
            <!--
                        <match_is_in_view_of object="this.assignedcontrolled" horizontal="360deg" vertical="360deg" /> -->
          </find_object_component>
          <do_if value="$weaponComponents.count gt 0">
            <set_value name="$targetWeaponDistance"
              exact="@$weaponComponents.{1}.bboxdistanceto.[$targetSector, $positionForAttack] - $thisRadius" />
            <do_if
              value="(@$weaponComponents.{1}.maxfirerange * 1.05) ge $targetWeaponDistance">
              <do_if
                value="(@$weaponComponents.{1}.maxfirerange * 1.05) ge @$weaponComponents.{1}.bboxdistanceto.{this.assignedcontrolled}">
                <set_value name="$safetyIndicator" exact="-1" />
              </do_if>
              <do_else>
                <set_value name="$safetyIndicator" exact="0" />
              </do_else>
            </do_if>
            <debug_text
              text="'AttackStationInSector [%s]: Primary Target %s has %s weapon components. First: %s. Distance to: %s. Fire Range: %s. Safety Indicator: %s.'.
                [this.assignedcontrolled.debugname, $primaryTarget.debugname, $weaponComponents.count, @$weaponComponents.{1}.debugname,
                $targetWeaponDistance, @$weaponComponents.{1}.maxfirerange, $safetyIndicator]"
              chance="$debugChance" />
            <remove_value name="$targetWeaponDistance" />
          </do_if>
          <do_else>
            <debug_text
              text="'AttackStationInSector [%s]: Primary Target %s has no weapon components. Safety Indicator: %s.'.
                [this.assignedcontrolled.debugname, $primaryTarget.debugname, $safetyIndicator]"
              chance="$debugChance" />
            <do_if
              value="(this.assignedcontrolled.bboxdistanceto.{$target} le $thisRadius * 3) or (this.assignedcontrolled.bboxdistanceto.{$primaryTarget} gt $thisRadius * 3)">
              <set_value name="$safetyIndicator" exact="0" />
            </do_if>
          </do_else>
          <remove_value name="$weaponComponents" />
          <do_if value="$safetyIndicator gt 0">
            <set_command command="command.attackobject" param="$primaryTarget" />
            <set_command_action commandaction="commandaction.flying" />
            <create_orientation name="$rotationOnTarget" orientation="look_at" refobject="$target" useaimtarget="true">
              <position object="this.assignedcontrolled" />
            </create_orientation>
            <do_if value="@$strafeOnAttack">
              <move_strafe object="this.assignedcontrolled" destination="$targetSector" finishonapproach="true" forcerotation="true">
                <position value="$positionForAttack" />
                <rotation value="$rotationOnTarget" />
                <interrupt_after_time time="$updateTime" />
              </move_strafe>
              <set_value name="$strafeOnAttack" exact="false" />
            </do_if>
            <do_else>
              <move_to destination="$targetSector" object="this.assignedcontrolled" finishonapproach="true" forceposition="true" forcerotation="true">
                <position value="$positionForAttack" />
                <rotation value="$rotationOnTarget" />
              </move_to>
            </do_else>
            <set_value name="$rotationGetOn" exact="$target" />
            <include_interrupt_actions ref="IsNotAcceptableRotation" />
            <do_if value="$rotationsIsNotAcceptable and $safetyIndicator gt 0">
              <move_to destination="$targetSector" object="this.assignedcontrolled" finishonapproach="false" forceposition="false" forcerotation="true"
                boost="false" travel="false">
                <position object="this.assignedcontrolled" />
                <rotation value="$rotationOnTarget" />
                <interrupt_after_time time="if this.assignedcontrolled.isclass.ship_xl then 10s else 5s" />
              </move_to>
            </do_if>
            <remove_value name="$rotationsIsNotAcceptable" />
            <remove_value name="$rotationOnTarget" />
            <do_if
              value="this.assignedcontrolled.attention ge attention.visible and this.assignedcontrolled.isclass.ship_l and $targetIsReallyAttackedByPrimaryWeapon ge 3">
              <set_value name="$safetyIndicator" exact="0" />
              <debug_text
                text="'AttackStationInSector [%s]: Moved for Attack. Visible is On. Target is really attacked: %s. Safety Indicator: %s.'.
                  [this.assignedcontrolled.debugname, $targetIsReallyAttackedByPrimaryWeapon, $safetyIndicator]"
                chance="$debugChance" />
            </do_if>
            <include_interrupt_actions ref="RefreshTargetsRelatedData" />
            <debug_text
              text="'AttackStationInSector [%s]: Moved for Attack. Distance to: Target: %s. Primary Target: %s. Rotation: %s (was NA: %s). DPS: %s (%s)'.
                [this.assignedcontrolled.debugname, $currentDistanceToTarget, $currentDistanceToPrimary,
                @this.assignedcontrolled.relativerotation.{$target}, $rotationsIsNotAcceptable,
                this.assignedcontrolled.dps.all, 0.05 * this.assignedcontrolled.dps.all]"
              chance="$debugChance" />
            <wait exact="200ms" />
          </do_if>
        </do_if>
        <debug_text
          text="'AttackStationInSector [%s]: Current status. Possible Attack Result: %s. Safety Indicator: %s. To Target: Primary: %s. Current: %s. Current Position: %s'.
            [this.assignedcontrolled.debugname, $possibleAttackStrength, $safetyIndicator,
            $currentDistanceToPrimary, $currentDistanceToTarget,  $positionForAttack]"
          chance="$debugChance" />
        <do_if value="$safetyIndicator lt 0">
          <set_command command="command.attackobject" param="$primaryTarget" />
          <set_command_action commandaction="commandaction.flying" />
          <debug_text
            text="'AttackStationInSector [%s]: Danger: Safety Indicator: %s.'.
              [this.assignedcontrolled.debugname, $safetyIndicator]"
            chance="$debugChance" />
          <do_if value="$safetyIndicator == -2">
            <debug_text
              text="'AttackStationInSector [%s]: Safety Indicator: %s. Attacked by drones. Moving back to initial position for attack: %s'.
                [this.assignedcontrolled.debugname, $safetyIndicator, $positionForAttackInitial]"
              chance="$debugChance" />
            <remove_value name="$previousPositionForAttackRelative" />
            <create_list name="$waypoints" />
            <append_to_list name="$waypoints" exact="$positionForAttackInitial" />
            <set_value name="$isAttackingPosition" exact="true" />
            <resume label="SafePathMove" />
          </do_if>
          <do_else>
            <do_if value="@$previousPositionForAttackRelative != null">
              <set_value name="$positionForAttackStepBackRelative" exact="$previousPositionForAttackRelative" />
              <remove_value name="$previousPositionForAttackRelative" />
              <debug_text
                text="'AttackStationInSector [%s]: Moving Back To Previous Position for attack: %s from Current: %s. Distance: %s'.
                  [this.assignedcontrolled.debugname, $positionForAttackStepBackRelative,
                  $positionRelativeToTarget, $currentDistanceToTarget]"
                chance="$debugChance"
              />
            </do_if>
            <do_else>
              <create_position name="$positionForAttackStepBackRelative"
                object="$target"
                x="$positionRelativeToTarget.x * 1.1m"
                y="$positionRelativeToTarget.y * 1.1m"
                z="$positionRelativeToTarget.z * 1.1m"
                space="$target" />
              <debug_text
                text="'AttackStationInSector [%s]: Moving Back To Position for attack: %s from Current: %s. Distance: %s'.
                  [this.assignedcontrolled.debugname, $positionForAttackStepBackRelative,
                  $positionRelativeToTarget, $currentDistanceToTarget]"
                chance="$debugChance"
              />
            </do_else>
            <create_position name="$positionForAttackStepBack"
              object="$target"
              x="$positionForAttackStepBackRelative.x"
              y="$positionForAttackStepBackRelative.y"
              z="$positionForAttackStepBackRelative.z"
              space="$targetSector" />
            <remove_value name="$positionForAttackStepBackRelative" />
          </do_else>
          <do_if value="this.assignedcontrolled.isclass.ship_xl">
            <create_orientation name="$rotationOnTarget" orientation="look_at" refobject="$target" useaimtarget="true">
              <position object="this.assignedcontrolled" />
            </create_orientation>
            <move_to destination="$targetSector" object="this.assignedcontrolled" forceposition="true" forcerotation="true" reverse="true"
              boost="this.assignedcontrolled.distanceto.{[$targetSector, $positionForAttackStepBack]} gt 1km" travel="false">
              <position value="$positionForAttackStepBack" />
              <rotation value="$rotationOnTarget" />
            </move_to>
          </do_if>
          <do_else>
            <move_to destination="$targetSector" object="this.assignedcontrolled" forceposition="true" forcerotation="true" reverse="true"
              boost="this.assignedcontrolled.distanceto.{[$targetSector, $positionForAttackStepBack]} gt 1km" travel="false">
              <position value="$positionForAttackStepBack" />
            </move_to>
          </do_else>
          <set_value name="$rotationGetOn" exact="$target" />
          <include_interrupt_actions ref="IsNotAcceptableRotation" />
          <do_if value="$rotationsIsNotAcceptable">
            <move_to destination="$targetSector" object="this.assignedcontrolled" finishonapproach="false" forceposition="false" forcerotation="true"
              boost="false" travel="false">
              <position object="this.assignedcontrolled" />
              <rotation value="$rotationOnTarget" />
              <interrupt_after_time time="if this.assignedcontrolled.isclass.ship_xl then 10s else 5s" />
            </move_to>
          </do_if>
          <remove_value name="$rotationsIsNotAcceptable" />
          <remove_value name="$rotationOnTarget" />
          <set_value name="$safetyIndicator" exact="0" />
          <remove_value name="$positionForAttackStepBack" />
          <include_interrupt_actions ref="RefreshTargetsRelatedData" />
          <wait exact="10ms" />
        </do_if>
        <do_elseif value="$safetyIndicator == 0">
          <!--
                    wait a bit ... -->
          <debug_text
            text="'AttackStationInSector [%s]: Staying and attacking for %s seconds. Rotation: %s. Possible attack strength: %s'.
              [this.assignedcontrolled.debugname, $updateTime, this.assignedcontrolled.relativerotation.{$target}, $possibleAttackStrength]"
            chance="$debugChance" />
          <do_if value="$possibleAttackStrength == 0">
            <debug_text
              text="'AttackStationInSector [%s]: Possible Attack Strength: %s. Problem with target.'.
                [this.assignedcontrolled.debugname, $possibleAttackStrength]"
              chance="$debugChance" />
            <remove_value name="$positionForAttack" />
            <remove_value name="$positionToMove" />
            <resume label="problemWithTarget" />
          </do_if>
          <set_value name="$targetIsReallyAttacked" exact="0" />
          <set_value name="$targetIsReallyAttackedByPrimaryWeapon" exact="0" />
          <do_all exact="5">
            <set_value name="$rotationGetOn" exact="$target" />
            <include_interrupt_actions ref="IsNotAcceptableRotation" />
            <do_if value="$rotationsIsNotAcceptable">
              <move_to destination="$targetSector" object="this.assignedcontrolled" finishonapproach="false" forceposition="false" forcerotation="true"
                boost="false" travel="false">
                <position object="this.assignedcontrolled" />
                <rotation value="$rotationOnTarget" />
                <interrupt_after_time time="if this.assignedcontrolled.isclass.ship_xl then 10s else 5s" />
              </move_to>
            </do_if>
            <do_else>
              <break />
            </do_else>
            <wait exact="10ms" />
            <do_if value="$safetyIndicator lt 0">
              <break />
            </do_if>
          </do_all>
          <remove_value name="$rotationsIsNotAcceptable" />
          <remove_value name="$rotationOnTarget" />
          <do_if value="$safetyIndicator == 0">
            <set_command command="command.attackobject" param="$primaryTarget" />
            <set_command_action commandaction="commandaction.attackingto" param="$primaryTarget" />
            <wait exact="$updateTime" />
            <debug_text
              text="'AttackStationInSector [%s]: Target is attacked count: %s. By Primary: %s. Target: %s. Primary: %s. Hull: %s.'.
                [this.assignedcontrolled.debugname, $targetIsReallyAttacked, $targetIsReallyAttackedByPrimaryWeapon,
                @$target.debugname, $primaryTarget.debugname, $primaryTarget.hullpercentage]"
              chance="$debugChance" />
            <append_to_list name="$countOfAttacks" exact="$targetIsReallyAttackedByPrimaryWeapon" />
            <do_if
              value="(this.attention ge attention.visible) and (($targetIsReallyAttackedByPrimaryWeapon lt 2 and $countOfAttacks.count == 1) or ($countOfAttacks.count gt 1 and $countOfAttacks.average lt 6)) and ($targetIsReallyAttacked lt ($updateTime / 2)f)">
              <debug_text
                text="'AttackStationInSector [%s]: AttackFailed. Target %s is not really attacked: %s (%s). Average %s in %s. Safety Indicator: %s. Attack Strength: %s. Going to acquire new target!'.
                  [this.assignedcontrolled.debugname, $target.debugname, $targetIsReallyAttackedByPrimaryWeapon, $targetIsReallyAttacked,
                  @$countOfAttacks.average, @$countOfAttacks.count, $safetyIndicator, $possibleAttackStrength]"
                chance="$debugChance" />
              <remove_value name="$positionForAttack" />
              <remove_value name="$positionToMove" />
              <remove_value name="$targetIsReallyAttacked" />
              <remove_value name="$countOfAttacks" />
              <resume label="acquireTarget" />
            </do_if>
          </do_if>
          <do_else>
            <wait exact="10ms" />
          </do_else>
        </do_elseif>
        <include_interrupt_actions ref="AvoidDronesAttack" />
        <do_if value="@$isFleeing == true">
          <resume label="SafePathMove" />
        </do_if>
      </do_while>
      <label name="targetDestroyed" />
      <remove_value name="$positionForAttackInitial" />
      <debug_text
        text="'AttackStationInSector [%s]: Target: %s is Destroyed. Primary Target: %s.'. [this.assignedcontrolled.debugname, $target.debugname, $primaryTarget.debugname]"
        chance="$debugChance" />
      <!--
            To Update -->
      <apply_experience entity="this" experience="'protect_sector'" chance="80" />
      <apply_experience object="this.assignedcontrolled" role="entityrole.service" experience="'protect_sector'" chance="60" />
      <label name="problemWithTarget" />
      <include_interrupt_actions ref="AvoidDronesAttack" />
      <do_if value="@$isFleeing == true">
        <resume label="SafePathMove" />
      </do_if>
      <!--
            To Update -->
      <remove_value name="$components" />
      <find_object_component name="$components" object="$primaryTarget" checkoperational="false" integrated="false" indestructible="false" invulnerable="false"
        sortbydistanceto="this.assignedcontrolled" excluded="$excludedComponents" append="true" multiple="true" recursive="true" sortdescending="false">
        <match module="true" />
        <match state="componentstate.wreck" negate="true" />
        <match_is_in_view_of object="this.assignedcontrolled" horizontal="270deg" vertical="270deg" />
      </find_object_component>
      <debug_text
        text="'AttackStationInSector [%s]: Target %s has %s components. First: %s. Distance to: %s.'.
          [this.assignedcontrolled.debugname, $primaryTarget.debugname, $components.count, @$components.{1},
          @this.assignedcontrolled.bboxdistanceto.{@$components.{1}}]"
        chance="$debugChance" />
      <do_if value="$components.count gt 0 and this.assignedcontrolled.bboxdistanceto.{@$components.{1}} le @$maxEffectiveCombatRange">
        <set_value name="$positionRelativeToNewTarget" exact="this.assignedcontrolled.relativeposition.{$components.{1}}" />
        <set_value name="$positionRelativeFromOldToNewTarget" exact="$target.relativeposition.{$components.{1}}" />
        <!--
                1. Calculate magnitudes of both position vectors -->
        <set_value name="$magnitude1" exact="sqrt($positionRelativeToNewTarget.x ^ 2 + $positionRelativeToNewTarget.y ^ 2 + $positionRelativeToNewTarget.z ^ 2)" />
        <set_value name="$magnitude2"
          exact="sqrt($positionRelativeFromOldToNewTarget.x ^ 2 + $positionRelativeFromOldToNewTarget.y ^ 2 + $positionRelativeFromOldToNewTarget.z ^ 2)" />

        <!--
                2. Calculate dot product -->
        <set_value name="$dotProduct"
          exact="$positionRelativeToNewTarget.x * $positionRelativeFromOldToNewTarget.x + $positionRelativeToNewTarget.y * $positionRelativeFromOldToNewTarget.y + $positionRelativeToNewTarget.z * $positionRelativeFromOldToNewTarget.z" />

        <!--
                3. Calculate normalized dot product (cosine of angle) -->
        <do_if value="$magnitude1 * $magnitude2 != 0">
          <set_value name="$normalizedDot" exact="$dotProduct / ($magnitude1 * $magnitude2)" />
        </do_if>
        <do_else>
          <set_value name="$normalizedDot" exact="1" />
        </do_else>

        <debug_text
          text="'AttackStationInSector [%s]: Position relationship: Normalized dot: %s. Ship position: %s. New Target: %s'.
            [this.assignedcontrolled.debugname, $normalizedDot, $positionRelativeToNewTarget, $positionRelativeFromOldToNewTarget]"
          chance="$debugChance" />

        <set_value name="$strafeOnAttack" exact="false" />
        <remove_value name="$strafePositionRelative" />
        <!--
                4. Interpret the result -->
        <do_if value="$normalizedDot gt 0.7">
          <!--
                    Positions are roughly in the same direction (position2 is more farther/closer) -->
          <debug_text
            text="'AttackStationInSector [%s]: Position 2 is mainly farther/closer to center than Position 1'. [this.assignedcontrolled.debugname]"
            chance="$debugChance" />
        </do_if>
        <do_elseif value="$normalizedDot lt -0.7">
          <!--
                    Positions are in roughly opposite directions (more than ~135° angle) -->
          <debug_text
            text="'AttackStationInSector [%s]: Position 2 is mainly on the opposite side from Position 1'. [this.assignedcontrolled.debugname]"
            chance="$debugChance" />
          <!--
                    This is a critical case - could mean crossing through the station center -->
        </do_elseif>
        <do_elseif value="$normalizedDot lt 0.5 and $normalizedDot gt -0.5">
          <!--
                    Positions are roughly perpendicular (position2 is more to the side) -->
          <debug_text
            text="'AttackStationInSector [%s]: Position 2 is mainly to the side of Position 1'. [this.assignedcontrolled.debugname]"
            chance="$debugChance" />
          <create_position name="$strafePositionRelative" object="$components.{1}"
            x="$positionRelativeToNewTarget.x - $positionRelativeFromOldToNewTarget.x"
            y="$positionRelativeToNewTarget.y - $positionRelativeFromOldToNewTarget.y"
            z="$positionRelativeToNewTarget.z - $positionRelativeFromOldToNewTarget.z"
            space="$components.{1}" />
          <set_value name="$strafeOnAttack" exact="true" />
          <debug_text
            text="'AttackStationInSector [%s]: Positions: Ship To New: %s. Strafe: %s'.[this.assignedcontrolled.debugname, $positionRelativeToNewTarget, $strafePositionRelative]"
            chance="$debugChance" />
        </do_elseif>
        <do_else>
          <!--
                    Positions are at an angle (position2 is partially to the side and partially farther/closer) -->
          <debug_text
            text="'AttackStationInSector [%s]: Position 2 is at an angle to Position 1'.[this.assignedcontrolled.debugname]"
            chance="$debugChance" />
        </do_else>
        <set_value name="$target" exact="@$components.{1}" />
        <debug_text
          text="'AttackStationInSector [%s]: Stand with New SubTarget %s'.[this.assignedcontrolled.debugname, $target.debugname]"
          chance="$debugChance" />
        <remove_value name="$components" />
        <resume label="standAndAttack" />
      </do_if>
      <remove_value name="$positionForAttack" />
      <remove_value name="$components" />
      <remove_value name="$positionToMove" />
      <resume label="acquireTarget" />

      <label name="fleeOut" />
      <remove_value name="$positionToMove" />
      <debug_text text="'AttackStationInSector [%s]: Moved out from %s.'. [this.assignedcontrolled.debugname, @$attacker.debugname]" chance="$debugChance" />
      <do_if value="@$dronesAttack == true and @$temporaryFormationLeader != null and @$temporaryFormationLeader != this.assignedcontrolled">
        <debug_text
          text="'AttackStationInSector [%s]: DronesAttack: Going to Fleeing Formation Leader: %s.'.
            [this.assignedcontrolled.debugname, @$temporaryFormationLeader.debugname]"
          chance="$debugChance" />
        <break_formation object="this.assignedcontrolled" />
        <leave_formation object="this.assignedcontrolled" />
        <signal_objects object="@$temporaryFormationLeader" param="'FleeingFormationJoin'" param2="this.assignedcontrolled" />
      </do_if>
      <set_value name="$enemyDronesShare" exact="true" />
      <do_while value="@$dronesAttack == true">
        <include_interrupt_actions ref="CheckDronesAttack" />
        <do_if value="@$dronesAttack == true">
          <debug_text
            text="'AttackStationInSector [%s]: DronesAttack: Drones still attacking. Waiting for %s seconds.'.[this.assignedcontrolled.debugname, $updateTime]"
            chance="$debugChance" />
          <wait exact="$updateTime" />
        </do_if>
        <do_else>
          <wait exact="$updateTime" />
          <include_interrupt_actions ref="CheckDronesAttack" />
        </do_else>
        <do_if value="this.assignedcontrolled.hullpercentage lt 99">
          <debug_text
            text="'AttackStationInSector [%s]: DronesAttack: Hull is broken: %s. Going to repair.'.
              [this.assignedcontrolled.debugname, this.assignedcontrolled.hullpercentage]"
            chance="$debugChance" />
          <break />
        </do_if>
      </do_while>
      <label name="postDroneAttack" />
      <set_value name="$enemyDronesShare" exact="false" />
      <do_if value="@$temporaryFormationLeader == this.assignedcontrolled">
        <debug_text
          text="'AttackStationInSector [%s]: DronesAttack: FleeingFormation: Breaking formation for %s ships.'.[this.assignedcontrolled.debugname, @$fleeingFormationList.count]"
          chance="$debugChance" />
        <break_formation object="this.assignedcontrolled" />
        <remove_value name="$fleeingFormationList" />
      </do_if>
      <do_elseif value="@$temporaryFormationLeader != null">
        <debug_text
          text="'AttackStationInSector [%s]: DronesAttack: FleeingFormation: Leaving formation for %s ships.'.
            [this.assignedcontrolled.debugname, @$temporaryFormationLeader.debugname]"
          chance="$debugChance" />
        <leave_formation object="this.assignedcontrolled" />
      </do_elseif>
      <remove_value name="$temporaryFormationLeader" />
      <do_if
        value="@this.assignedcontrolled.units.{unitcategory.defence}.count gt @this.assignedcontrolled.availableunits.{unitcategory.defence}.count or
                @this.assignedcontrolled.units.{unitcategory.repair}.count gt @this.assignedcontrolled.availableunits.{unitcategory.repair}.count">
        <do_if
          value="@this.assignedcontrolled.units.{unitcategory.defence}.count gt @this.assignedcontrolled.availableunits.{unitcategory.defence}.count">
          <set_drone_armed object="this.assignedcontrolled" category="unitcategory.defence" armed="false" />
        </do_if>
        <do_if
          value="@this.assignedcontrolled.units.{unitcategory.repair}.count gt @this.assignedcontrolled.availableunits.{unitcategory.repair}.count">
          <set_drone_armed object="this.assignedcontrolled" category="unitcategory.repair" armed="false" />
        </do_if>
        <wait exact="$updateTime / 2" />
        <set_drone_armed object="this.assignedcontrolled" category="unitcategory.repair" armed="true" />
      </do_if>
      <remove_value name="$dronesAttack" />
      <remove_value name="$isFleeing" />

      <label name="finish" />

      <find_object_component name="$damagedComponents" object="this.assignedcontrolled" class="class.destructible"
        checkoperational="false" multiple="true">
        <match_any>
          <match restorable="true" comment="wrecked" />
          <match repairable="true" invulnerable="false">
            <match_hull min="100" negate="true" />
          </match>
          <match needsrepair="true" invulnerable="false">
            <match_hull min="100" negate="true" />
          </match>
        </match_any>
      </find_object_component>
      <do_if value="this.assignedcontrolled.hullpercentage == 100 and $damagedComponents.count == 0">
        <do_if value="this.assignedcontrolled.shieldpercentage lt 100">
          <debug_text
            text="'AttackStationInSector [%s]: UnderAttack: Will wait till Shield (%s) will recovered.'.
              [this.assignedcontrolled.debugname, this.assignedcontrolled.shieldpercentage]"
            chance="$debugChance" />
          <wait exact="0.5s * (100 - this.assignedcontrolled.shieldpercentage)" />
        </do_if>
        <do_if value="@$primaryTarget != null and @$primaryTarget.isrealclass.station and @$primaryTarget.iswreck == false">
          <resume label="acquireTarget" />
        </do_if>
      </do_if>

      <do_if value="@$attackTimeStamp gt 0">
        <set_value name="$attackTimeStamp" exact="player.age - $attackTimeStamp" />
      </do_if>
      <debug_text
        text="'AttackStationInSector [%s]: Finishing in %s.'.
          [this.assignedcontrolled.debugname, @$attackTimeStamp.formatted.{'%m:%S'}]"
        chance="$debugChance" />
      <do_if value="this.assignedcontrolled.hullpercentage le 98 or $damagedComponents.count gt 0">
        <debug_text
          text="'AttackStationInSector [%s]: Hull is broken: %s. Components damaged: %s. Going to repair.'.
            [this.assignedcontrolled.debugname, this.assignedcontrolled.hullpercentage, $damagedComponents.count]"
          chance="$debugChance" />
        <set_value name="this.assignedcontrolled.pilot.$playerOwnedWorkaroundForRestock" exact="true" />
        <create_order id="'Resupply'" object="this.assignedcontrolled" immediate="true">
          <param name="internalorder" value="true" />
          <param name="debugchance" value="$debugChance" />
          <param name="onlyuseresupplierships" value="false" />
          <param name="urgent" value="true" />
          <!-- <param name="playerOwnedWorkaround" value="true" /> -->
        </create_order>
      </do_if>
      <do_else>
        <stop_moving object="this.ship" />
        <wait exact="10ms" />
        <do_if
          value="@this.assignedcontrolled.commander != null">
          <debug_text
            text="'AttackStationInSector [%s]: Inform Commander: %s.'.
              [this.assignedcontrolled.debugname, this.assignedcontrolled.commander.debugname]"
          />
          <signal_objects object="this.assignedcontrolled.commander" param="'StationAttackIsFinished'"
            param2="this.assignedcontrolled" delay="3s" />
          <remove_value name="$positionInSector" />
          <remove_value name="$thisRadius" />
          <remove_value name="$targetSector" />
          <remove_value name="$primaryTargetRadius" />
          <remove_value name="$maxEffectiveTargetCombatRange" />
          <remove_value name="$positionPrimaryTargetInSector" />
          <remove_value name="$currentDistanceToPrimary" />
          <remove_value name="$safeDistanceToPrimary" />
          <remove_value name="$positionRelativeToPrimaryTarget" />
          <remove_value name="$targetRadius" />
          <remove_value name="$currentDistanceToTarget" />
          <remove_value name="$targetEffectiveRange" />
          <remove_value name="$positionTargetRelativeToPrimaryTarget" />
          <remove_value name="$positionRelativeToTarget" />
          <remove_value name="$target" />
        </do_if>
      </do_else>
    </actions>
  </attention>
  <on_abort>
    <debug_text text="'AttackStationInSector [%s]: Aborted.'. [this.assignedcontrolled.debugname]" chance="$debugChance" />
    <stop_moving object="this.ship" />
    <remove_value name="$primaryTarget" />
  </on_abort>

</aiscript>